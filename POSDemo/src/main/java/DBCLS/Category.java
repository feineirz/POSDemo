/////////////////////////////////////////////////////////////////////
////////////////////// THIS CLASS GENERATED BY //////////////////////
////////////////////// MySQL2JavaCLS Generator //////////////////////
/////////////////////////////////////////////////////////////////////
/*************** Created by feinz(feineirz@live.com) ***************/
/////////////////////////////////////////////////////////////////////

package DBCLS;

import java.sql.*;
import java.util.*;
import java.lang.*;

/*********************************************{{{ CLASS START }}}*********************************************/

public class Category {

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////[ CLASS HEADER ]//////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private String name;
	private String description;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "category";
	public final String columnNames = ""
		+ " id,"
		+ " name,"
		+ " description";

	/// CLASS STRUCTURE ///
	public static class CategoryInfo {
		public Integer id;
		public String name;
		public String description;
	}

////////////////////////////////////////[ END CLASS HEADER ]////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ CLASS CONSTRUCTOR ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	
	//////////////////////////////[ CONSTRUCTOR ]//////////////////////////////
	// Create a Category object from the given id. //
	///////////////////////////////////////////////////////////////////////////

	/// DEFAULT CONSTRUCTOR ///
	public Category() {}

	/// OVERLOAD CONSTRUCTOR ///
	public Category(Integer Category_id) {		
		this(Category_id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	public Category(Integer Category_id, Connection conn) {
		this(Category_id, conn, false);
	} /////////////////////////////////////////////////////////////////////////
	
	/// MAIN CONSTRUCTOR ///
	public Category(Integer Category_id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = "SELECT *"
					+ " FROM " + relName
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, Category_id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.name = rs.getString("name");
				this.description = rs.getString("description");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	} /////////////////////////////////////////////////////////////////////////

/////////////////////////////////////[ END CLASS CONSTRUCTOR ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////[ CLASS PROPERTIES ]////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	/// GET ///
	public Integer getId() { 
		return this.id;
	}

	public String getName() { 
		return this.name;
	}

	public String getDescription() { 
		return this.description;
	}


	/// SET ///
	public boolean setName(String value) {
		if (updateCategoryProperty("name", value)) {
			this.name = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setDescription(String value) {
		if (updateCategoryProperty("description", value)) {
			this.description = value;
			return true;
		} else { 
			return false;
		}
	}


//////////////////////////////////////[ END CLASS PROPERTIES ]//////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ REQUIRED FUNCTIONS ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////[ List ]//////////////////////////////
	// List Category in database as Category objects. //
	////////////////////////////////////////////////////////////////////
	/// Overload ///
	public static ArrayList<Category> listCategory(){
		return listCategory("","name");
	}
	public static ArrayList<Category> listCategory(String condition){
		return listCategory(condition,"name");
	}	
	/// Main ///
	public static ArrayList<Category> listCategory(String condition, String order) {
		
		ArrayList<Category> buff = new ArrayList<Category>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT *"
					+ " FROM category"
					+ condition
					+ order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new Category(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Add ]//////////////////////////////
	// Add Category to database by giving a raw information. //
	///////////////////////////////////////////////////////////////////
	public static Category addCategory(Integer id, String name, String description) {
		
		CategoryInfo categoryInfo = new CategoryInfo();
		categoryInfo.id = id;
		categoryInfo.name = name;
		categoryInfo.description = description;
		
		return addCategory(categoryInfo);
		
	}
	
	/////////////////////////////////////////////////////////////////////
	// Add Category to database by giving a structured information. //
	/////////////////////////////////////////////////////////////////////
	public static Category addCategory(CategoryInfo categoryInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "INSERT INTO category"
					+ " (id, name, description)"
					+ " VALUES(?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, categoryInfo.id);
			stmt.setString(2, categoryInfo.name);
			stmt.setString(3, categoryInfo.description);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					Category category = new Category(rs.getInt(1), conn);			
					conn.close();
					return category;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	} /////////////////////////////////////////////////////////////////
	
	
	//////////////////////////////////[ Update ]/////////////////////////////////
	// Update Category information in database by giving a raw information. //
	/////////////////////////////////////////////////////////////////////////////
	public static boolean updateCategoryInfo(Integer id, String name, String description) {
		
		CategoryInfo categoryInfo = new CategoryInfo();
		categoryInfo.id = id;
		categoryInfo.name = name;
		categoryInfo.description = description;
		
		return updateCategoryInfo(categoryInfo);
		
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	// Update Category information in database by giving a structured information. //
	////////////////////////////////////////////////////////////////////////////////////
	public static boolean updateCategoryInfo(CategoryInfo categoryInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE category"
					+ " SET"
					+ "  name = ?,"
					+ "  description = ?"
					+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, categoryInfo.name);
			stmt.setString(2, categoryInfo.description);
			stmt.setInt(3, categoryInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Update Property ]//////////////////////////////
	// Update a single property in database by the given ColumnName and Value. ////
	///////////////////////////////////////////////////////////////////////////////
	public boolean updateCategoryProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE category"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} /////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateCategoryProperty(String columnName, byte value) {
		return updateCategoryProperty(columnName, new Long(value));
	}
	public boolean updateCategoryProperty(String columnName, Short value) {
		return updateCategoryProperty(columnName, new Long(value));
	}
	public boolean updateCategoryProperty(String columnName, int value) {
		return updateCategoryProperty(columnName, new Long(value));
	}
	/// Main ///
	public boolean updateCategoryProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE category"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateCategoryProperty(String columnName, Float value) {
		return updateCategoryProperty(columnName, new Double(value));
	}
	/// Main ///
	public boolean updateCategoryProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE category"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Delete ]//////////////////////////////
	// Delete Category from database. //
	//////////////////////////////////////////////////////////////////////
	public static boolean deleteCategory(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "DELETE FROM category"
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ IsExist ]//////////////////////////////
	// Check if record(s) from the given condition is exist in a database. //
	///////////////////////////////////////////////////////////////////////
	public static Category isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = "SELECT *" 
					+ " FROM category"
					+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Category category = new Category(rs.getInt("id"), conn);
				conn.close();
				return category;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	} /////////////////////////////////////////////////////////////////////
	

/////////////////////////////////////[ END REQUIRED FUNCTIONS ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////[ USER CUSTOM FUNCTIONS ]/////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


// @USER CUSTOM FUNCTIONS@ //
// PLACE YOUR CUSTOM FUNCTIONS HERE //
        public static Category NameToCategory(String categoryName) {

            Connection conn = new MySQLDBConnector().getDBConnection();
            Category category = null;
            try {
                    String qry = "SELECT * FROM category WHERE name = ?";
                    PreparedStatement stmt = conn.prepareStatement(qry);
                    stmt.setString(1, categoryName);

                    ResultSet rs = stmt.executeQuery();            
                    while (rs.next()) {
                            category = new Category(rs.getInt("id"));                                    
                            return category;
                    }			
                    conn.close();
                    return category;

            } catch (SQLException e) {
                    try {
                            conn.close();
                    } catch (SQLException ex) {
                            ex.printStackTrace();
                    }
                    e.printStackTrace();
                    return null;
            }

        } /////////////////////////////////////////////////////////////////////


///////////////////////////////////[ END USER CUSTOM FUNCTIONS ]///////////////////////////////////



}

/*********************************************{{{ CLASS END }}}*********************************************/
