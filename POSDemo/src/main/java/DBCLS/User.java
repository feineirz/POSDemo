////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//----------------------------------- THIS CLASS GENERATED BY ------------------------------------//
//----------------------------------- MySQL2JavaCLS Generator ------------------------------------//
//------------------------------------------------------------------------------------------------//
//------------------------------------- < version 1.1.0.3 > --------------------------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////
//************************************************************************************************//
//****************************** Created by feinz(feineirz@live.com) *****************************//
//************************************************************************************************//
////////////////////////////////////////////////////////////////////////////////////////////////////


package DBCLS;

import java.lang.*;
import java.sql.*;
import java.util.*;


/*--------------------------------------{{{ CLASS START }}}---------------------------------------*/

/**
 * User class to manage User in a Database.
 */
public class User {

/*================================================================================================*/
/*================================================================================================*/
/*========================================[ CLASS HEADER ]========================================*/
/*================================================================================================*/
/*================================================================================================*/

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private String username;
	private String password;
	private String email;
	private String phone;
	private Integer level;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "user";
	public final String columnNames = ""
		+ " id,"
		+ " username,"
		+ " password,"
		+ " email,"
		+ " phone,"
		+ " level";

	/// CLASS STRUCTURE ///
	public static class UserInfo {
		public Integer id;
		public String username;
		public String password;
		public String email;
		public String phone;
		public Integer level;
	}

/*======================================[ END CLASS HEADER ]======================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ CLASS CONSTRUCTOR ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ CONSTRUCTOR ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*--------------------------- Create a User object from the given id. ----------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// DEFAULT CONSTRUCTOR ///
	/**
	 * Default User class to use a private helpful methods.
	 */
	public User() {}

	/// OVERLOAD CONSTRUCTOR ///
	/**
	 * 
	 * @param User_id A Primary key of User to be instances.
	 */       
	public User(Integer User_id) {		
		this(User_id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	/**
	 * 
	 * @param User_id A Primary key of User to be instances.
	 *
	 * @param conn MySQL Connection to be connected to the database.
	 */
	public User(Integer User_id, Connection conn) {
		this(User_id, conn, false);
	}
	
	/// MAIN CONSTRUCTOR ///
	/**
	 * 
	 * @param User_id A Primary key of User to be instances.
	 *
	 * @param conn MySQL Connection to be connected to the database.
	 *
	 * @param autoCloseConnection Auto close the given connection after query successful.
	 */
	public User(Integer User_id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM " + relName
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, User_id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.username = rs.getString("username");
				this.password = rs.getString("password");
				this.email = rs.getString("email");
				this.phone = rs.getString("phone");
				this.level = rs.getInt("level");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	}

/*===================================[ END CLASS CONSTRUCTOR ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*======================================[ CLASS PROPERTIES ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


	/// GET ///
	public Integer getId() { 
		return this.id;
	}

	public String getUsername() { 
		return this.username;
	}

	public String getPassword() { 
		return this.password;
	}

	public String getEmail() { 
		return this.email;
	}

	public String getPhone() { 
		return this.phone;
	}

	public Integer getLevel() { 
		return this.level;
	}


	/// SET ///
	public boolean setUsername(String value) {
		if (updateUserProperty("username", value)) {
			this.username = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setPassword(String value) {
		if (updateUserProperty("password", value)) {
			this.password = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setEmail(String value) {
		if (updateUserProperty("email", value)) {
			this.email = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setPhone(String value) {
		if (updateUserProperty("phone", value)) {
			this.phone = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setLevel(Integer value) {
		if (updateUserProperty("level", value)) {
			this.level = value;
			return true;
		} else { 
			return false;
		}
	}


/*====================================[ END CLASS PROPERTIES ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ REQUIRED FUNCTIONS ]=====================================*/
/*================================================================================================*/
/*================================================================================================*/

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------------[ LIST ]--------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------------------------- List User in database as User objects. ----------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Overload ///
	/**
	 * 
	 * Default List method to list all record of User in the database.
	 * 
	 * @return ArrayList of User objects.
	 * 
	 */
	public static ArrayList<User> listUser(){
		return listUser("","");
	}

	/**
	 * 
	 * @param condition The condition to specify the record to be return.
	 * 
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"
	 * 
	 * @return ArrayList of User objects matches to the given condition.
	 * 
	 */
	public static ArrayList<User> listUser(String condition){
		return listUser(condition,"");
	}
	
	/// Main ///
	/**
	 * 
	 * @param condition The condition to specify the record to be return.
	 * 
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"
	 * 
	 * @param order The order to sort the returned list.
	 * 
	 *  Ex. "name desc"
	 * 
	 * @return ArrayList of User objects matches to the given condition.
	 * 
	 */
	public static ArrayList<User> listUser(String condition, String order) {
		
		ArrayList<User> buff = new ArrayList<User>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM user"
				+ condition
				+ order;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new User(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------------[ ADD (RAW) ]------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------------------- Add User to database by giving a raw information. -----------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @return User object of new created User.
	 */
	public static User addUser(
		Integer id, 
		String username, 
		String password, 
		String email, 
		String phone, 
		Integer level) {
		
		UserInfo userInfo = new UserInfo();
		userInfo.id = id;
		userInfo.username = username;
		userInfo.password = password;
		userInfo.email = email;
		userInfo.phone = phone;
		userInfo.level = level;
		
		return addUser(userInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ ADD (STRUCTURED) ]--------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------- Add User to database by giving a structured information. -------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param userInfo User information structure that contains all User's information.
	 *
	 * @return User object of new created User.
	 */
	public static User addUser(UserInfo userInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "INSERT INTO user"
				+ " (id, username, password, email, phone, level)"
				+ " VALUES(?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, userInfo.id);
			stmt.setString(2, userInfo.username);
			stmt.setString(3, userInfo.password);
			stmt.setString(4, userInfo.email);
			stmt.setString(5, userInfo.phone);
			stmt.setInt(6, userInfo.level);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					User user = new User(rs.getInt(1), conn);			
					conn.close();
					return user;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	}
	
	
/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ UPDATE (RAW) ]----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*--------------- Update User information in database by giving a raw information. ---------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @return True if update successful.
	 */
	public static boolean updateUserInfo(
		Integer id, 
		String username, 
		String password, 
		String email, 
		String phone, 
		Integer level) {
		
		UserInfo userInfo = new UserInfo();
		userInfo.id = id;
		userInfo.username = username;
		userInfo.password = password;
		userInfo.email = email;
		userInfo.phone = phone;
		userInfo.level = level;
		
		return updateUserInfo(userInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*------------------------------------[ UPDATE (STRUCTURED) ]-------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------- Update User information in database by giving a structured information. ------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param userInfo User information structure contains all User's information.
	 *
	 * @return True if update successful.
	 */
	public static boolean updateUserInfo(UserInfo userInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE user"
				+ " SET"
				+ " username = ?,"
				+ " password = ?,"
				+ " email = ?,"
				+ " phone = ?,"
				+ " level = ?"
				+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, userInfo.username);
			stmt.setString(2, userInfo.password);
			stmt.setString(3, userInfo.email);
			stmt.setString(4, userInfo.phone);
			stmt.setInt(5, userInfo.level);
			stmt.setInt(6, userInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ UPDATE PROPERTY ]---------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------- Update a single property in database by the given ColumnName and Value. ------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateUserProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE user"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Integer ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateUserProperty(String columnName, byte value) {
		return updateUserProperty(columnName, new Long(value));
	}
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateUserProperty(String columnName, Short value) {
		return updateUserProperty(columnName, new Long(value));
	}
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateUserProperty(String columnName, int value) {
		return updateUserProperty(columnName, new Long(value));
	}

	/// Main Integer ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateUserProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE user"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Decimal ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateUserProperty(String columnName, Float value) {
		return updateUserProperty(columnName, new Double(value));
	}

	/// Main Decimal ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateUserProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE user"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------[ DELETE ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------------------------------- Delete User from database. ----------------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Local ///
	/**
	 * 
	 * @return True if deletion successful.
	 */
	public boolean deleteUser() {
		
		return deleteUser(this.id);
		
	}

	/// Static ///
	/**
	 * 
	 * @param id User id to be delete.
	 *
	 * @return  True if deletion successful.
	 */
	public static boolean deleteUser(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "DELETE FROM user"
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*------------------------------------------[ IsEXIST ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------- Check if record(s) from the given condition is exists in a database. -------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param condition The condition to specify the record to be return.
	 * 
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"
	 * 
	 * @return The first User object matches the given condition.
	 */
	public static User isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = ""
				+ "SELECT *" 
				+ " FROM user"
				+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				User user = new User(rs.getInt("id"), conn);
				conn.close();
				return user;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	}
	

/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ ToCLASSINFO ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*-------------------------- Convert User class to the UserInfo class. ---------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @return UserInfo object.
	 */
	public UserInfo toUserInfo() {
        
		UserInfo ci = new UserInfo();
		ci.id = this.id;
		ci.username = this.username;
		ci.password = this.password;
		ci.email = this.email;
		ci.phone = this.phone;
		ci.level = this.level;

		return ci;

	}

/*===================================[ END REQUIRED FUNCTIONS ]===================================*/



/*================================================================================================*/
/*================================================================================================*/
/*===================================[ USER CUSTOM FUNCTIONS ]====================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------[ USER CUSTOM FUNCTIONS ]------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------------------- PLACE YOUR CUSTOM FUNCTIONS HERE -------------------------------*/
/*------------------------------------------------------------------------------------------------*/

    
    public static User LogIn(String username, String password) {

            Connection conn = new MySQLDBConnector().getDBConnection();
            User user = null;
            try {
                    String qry = ""
                        + "SELECT *"
                        + " FROM user"
                        + " WHERE username = ? AND password = ?";
                    PreparedStatement stmt = conn.prepareStatement(qry);
                    stmt.setString(1, username);
                    stmt.setString(2, password);

                    ResultSet rs = stmt.executeQuery();            
                    while (rs.next()) {
                            user = new User(rs.getInt("id"));
                            return user;
                    }			
                    conn.close();

            } catch (SQLException e) {
                    try {
                            conn.close();
                    } catch (SQLException ex) {
                            ex.printStackTrace();
                    }
                    e.printStackTrace();                    
            }
            
            return user;

    }
    

    public UserInfo toUserInfoWithDefault() {

            UserInfo ui = new UserInfo();
            ui.id = 0;
            ui.username = "system";
            ui.password = "";
            ui.email = "system.system.net";
            ui.phone = "099 999 9999";
            ui.level = 1;   
            
            if (this.id != null) {
                ui = this.toUserInfo();
            }
            return ui;                    

    }

/*=================================[ END USER CUSTOM FUNCTIONS ]==================================*/



}


/*--------------------------------------{{{ CLASS END }}}---------------------------------------*/

////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//------------------------|| Feel free to use but please keep the credit. ||----------------------//
//------------------------------------------------------------------------------------------------//
//------------------------|| 01100110 01100101 01101001 01101110 01111010 ||----------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////