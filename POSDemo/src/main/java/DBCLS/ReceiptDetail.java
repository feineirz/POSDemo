/////////////////////////////////////////////////////////////////////
////////////////////// THIS CLASS GENERATED BY //////////////////////
////////////////////// MySQL2JavaCLS Generator //////////////////////
/////////////////////////////////////////////////////////////////////
/*************** Created by feinz(feineirz@live.com) ***************/
/////////////////////////////////////////////////////////////////////

package DBCLS;

import java.sql.*;
import java.util.*;
import java.lang.*;

/*********************************************{{{ CLASS START }}}*********************************************/

public class ReceiptDetail {

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////[ CLASS HEADER ]//////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private Integer receipt;
	private Integer product;
	private Double current_cost;
	private Double current_price;
	private Integer quantity;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "receipt_detail";
	public final String columnNames = ""
		+ " id,"
		+ " receipt,"
		+ " product,"
		+ " current_cost,"
		+ " current_price,"
		+ " quantity";

	/// CLASS STRUCTURE ///
	public static class ReceiptDetailInfo {
		public Integer id;
		public Integer receipt;
		public Integer product;
		public Double current_cost;
		public Double current_price;
		public Integer quantity;
	}

////////////////////////////////////////[ END CLASS HEADER ]////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ CLASS CONSTRUCTOR ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	
	//////////////////////////////[ CONSTRUCTOR ]//////////////////////////////
	// Create a ReceiptDetail object from the given id. //
	///////////////////////////////////////////////////////////////////////////

	/// DEFAULT CONSTRUCTOR ///
	public ReceiptDetail() {}

	/// OVERLOAD CONSTRUCTOR ///
	public ReceiptDetail(Integer ReceiptDetail_id) {		
		this(ReceiptDetail_id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	public ReceiptDetail(Integer ReceiptDetail_id, Connection conn) {
		this(ReceiptDetail_id, conn, false);
	} /////////////////////////////////////////////////////////////////////////
	
	/// MAIN CONSTRUCTOR ///
	public ReceiptDetail(Integer ReceiptDetail_id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = "SELECT *"
					+ " FROM " + relName
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, ReceiptDetail_id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.receipt = rs.getInt("receipt");
				this.product = rs.getInt("product");
				this.current_cost = rs.getDouble("current_cost");
				this.current_price = rs.getDouble("current_price");
				this.quantity = rs.getInt("quantity");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	} /////////////////////////////////////////////////////////////////////////

/////////////////////////////////////[ END CLASS CONSTRUCTOR ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////[ CLASS PROPERTIES ]////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	/// GET ///
	public Integer getId() { 
		return this.id;
	}

	public Integer getReceipt() { 
		return this.receipt;
	}

	public Integer getProduct() { 
		return this.product;
	}

	public Double getCurrent_cost() { 
		return this.current_cost;
	}

	public Double getCurrent_price() { 
		return this.current_price;
	}

	public Integer getQuantity() { 
		return this.quantity;
	}


	/// SET ///
	public boolean setReceipt(Integer value) {
		if (updateReceiptDetailProperty("receipt", value)) {
			this.receipt = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setProduct(Integer value) {
		if (updateReceiptDetailProperty("product", value)) {
			this.product = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCurrent_cost(Double value) {
		if (updateReceiptDetailProperty("current_cost", value)) {
			this.current_cost = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCurrent_price(Double value) {
		if (updateReceiptDetailProperty("current_price", value)) {
			this.current_price = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setQuantity(Integer value) {
		if (updateReceiptDetailProperty("quantity", value)) {
			this.quantity = value;
			return true;
		} else { 
			return false;
		}
	}


//////////////////////////////////////[ END CLASS PROPERTIES ]//////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ REQUIRED FUNCTIONS ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////[ List ]//////////////////////////////
	// List ReceiptDetail in database as ReceiptDetail objects. //
	////////////////////////////////////////////////////////////////////
	/// Overload ///
	public static ArrayList<ReceiptDetail> listReceiptDetail(){
		return listReceiptDetail("","");
	}
	public static ArrayList<ReceiptDetail> listReceiptDetail(String condition){
		return listReceiptDetail(condition,"");
	}	
	/// Main ///
	public static ArrayList<ReceiptDetail> listReceiptDetail(String condition, String order) {
		
		ArrayList<ReceiptDetail> buff = new ArrayList<ReceiptDetail>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT *"
					+ " FROM receipt_detail"
					+ condition
					+ order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new ReceiptDetail(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Add ]//////////////////////////////
	// Add ReceiptDetail to database by giving a raw information. //
	///////////////////////////////////////////////////////////////////
	public static ReceiptDetail addReceiptDetail(Integer id, Integer receipt, Integer product, Double current_cost, Double current_price, Integer quantity) {
		
		ReceiptDetailInfo receiptdetailInfo = new ReceiptDetailInfo();
		receiptdetailInfo.id = id;
		receiptdetailInfo.receipt = receipt;
		receiptdetailInfo.product = product;
		receiptdetailInfo.current_cost = current_cost;
		receiptdetailInfo.current_price = current_price;
		receiptdetailInfo.quantity = quantity;
		
		return addReceiptDetail(receiptdetailInfo);
		
	}
	
	/////////////////////////////////////////////////////////////////////
	// Add ReceiptDetail to database by giving a structured information. //
	/////////////////////////////////////////////////////////////////////
	public static ReceiptDetail addReceiptDetail(ReceiptDetailInfo receiptdetailInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "INSERT INTO receipt_detail"
					+ " (id, receipt, product, current_cost, current_price, quantity)"
					+ " VALUES(?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, receiptdetailInfo.id);
			stmt.setInt(2, receiptdetailInfo.receipt);
			stmt.setInt(3, receiptdetailInfo.product);
			stmt.setDouble(4, receiptdetailInfo.current_cost);
			stmt.setDouble(5, receiptdetailInfo.current_price);
			stmt.setInt(6, receiptdetailInfo.quantity);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					ReceiptDetail receiptdetail = new ReceiptDetail(rs.getInt(1), conn);			
					conn.close();
					return receiptdetail;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	} /////////////////////////////////////////////////////////////////
	
	
	//////////////////////////////////[ Update ]/////////////////////////////////
	// Update ReceiptDetail information in database by giving a raw information. //
	/////////////////////////////////////////////////////////////////////////////
	public static boolean updateReceiptDetailInfo(Integer id, Integer receipt, Integer product, Double current_cost, Double current_price, Integer quantity) {
		
		ReceiptDetailInfo receiptdetailInfo = new ReceiptDetailInfo();
		receiptdetailInfo.id = id;
		receiptdetailInfo.receipt = receipt;
		receiptdetailInfo.product = product;
		receiptdetailInfo.current_cost = current_cost;
		receiptdetailInfo.current_price = current_price;
		receiptdetailInfo.quantity = quantity;
		
		return updateReceiptDetailInfo(receiptdetailInfo);
		
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	// Update ReceiptDetail information in database by giving a structured information. //
	////////////////////////////////////////////////////////////////////////////////////
	public static boolean updateReceiptDetailInfo(ReceiptDetailInfo receiptdetailInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt_detail"
					+ " SET"
					+ "  receipt = ?,"
					+ "  product = ?,"
					+ "  current_cost = ?,"
					+ "  current_price = ?,"
					+ "  quantity = ?"
					+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, receiptdetailInfo.receipt);
			stmt.setInt(2, receiptdetailInfo.product);
			stmt.setDouble(3, receiptdetailInfo.current_cost);
			stmt.setDouble(4, receiptdetailInfo.current_price);
			stmt.setInt(5, receiptdetailInfo.quantity);
			stmt.setInt(6, receiptdetailInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Update Property ]//////////////////////////////
	// Update a single property in database by the given ColumnName and Value. ////
	///////////////////////////////////////////////////////////////////////////////
	public boolean updateReceiptDetailProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt_detail"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} /////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateReceiptDetailProperty(String columnName, byte value) {
		return updateReceiptDetailProperty(columnName, new Long(value));
	}
	public boolean updateReceiptDetailProperty(String columnName, Short value) {
		return updateReceiptDetailProperty(columnName, new Long(value));
	}
	public boolean updateReceiptDetailProperty(String columnName, int value) {
		return updateReceiptDetailProperty(columnName, new Long(value));
	}
	/// Main ///
	public boolean updateReceiptDetailProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt_detail"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateReceiptDetailProperty(String columnName, Float value) {
		return updateReceiptDetailProperty(columnName, new Double(value));
	}
	/// Main ///
	public boolean updateReceiptDetailProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt_detail"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Delete ]//////////////////////////////
	// Delete ReceiptDetail from database. //
	//////////////////////////////////////////////////////////////////////
	public static boolean deleteReceiptDetail(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "DELETE FROM receipt_detail"
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ IsExist ]//////////////////////////////
	// Check if record(s) from the given condition is exist in a database. //
	///////////////////////////////////////////////////////////////////////
	public static ReceiptDetail isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = "SELECT *" 
					+ " FROM receipt_detail"
					+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				ReceiptDetail receiptdetail = new ReceiptDetail(rs.getInt("id"), conn);
				conn.close();
				return receiptdetail;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	} /////////////////////////////////////////////////////////////////////
	

/////////////////////////////////////[ END REQUIRED FUNCTIONS ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////[ USER CUSTOM FUNCTIONS ]/////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


// @USER CUSTOM FUNCTIONS@ //
// PLACE YOUR CUSTOM FUNCTIONS HERE //        
        //////////////////////////////[ List ]//////////////////////////////
	// List ReceiptDetail in database as ReceiptDetailGroupInfo objects. //
	////////////////////////////////////////////////////////////////////
	/// Overload ///
	public static ArrayList<ReceiptDetail> listReceiptDetailJoinReceipt(){
		return listReceiptDetailJoinReceipt("","");
	}
	public static ArrayList<ReceiptDetail> listReceiptDetailJoinReceipt(String condition){
		return listReceiptDetailJoinReceipt(condition,"");
	}	
	/// Main ///
	public static ArrayList<ReceiptDetail> listReceiptDetailJoinReceipt(String condition, String order) {
		
		ArrayList<ReceiptDetail> buff = new ArrayList<ReceiptDetail>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT rd.*, r.receipt_date"
					+ " FROM receipt_detail rd"
                                        + "  INNER JOIN receipt r"
                                        + "  ON rd.receipt = r.id"
					+ condition
					+ order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
                                buff.add(new ReceiptDetail(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////        
        
        public static class ReceiptDetailGroupInfo {
            
            public ReceiptDetail receiptDetail;
            public Integer sumQuantity;
            
        }
        
        //////////////////////////////[ List ]//////////////////////////////
	// List ReceiptDetail in database as ReceiptDetailGroupInfo objects. //
	////////////////////////////////////////////////////////////////////
	/// Overload ///
	public static ArrayList<ReceiptDetailGroupInfo> listReceiptDetailGroupJoinReceipt(){
		return listReceiptDetailGroupJoinReceipt("","");
	}
	public static ArrayList<ReceiptDetailGroupInfo> listReceiptDetailGroupJoinReceipt(String condition){
		return listReceiptDetailGroupJoinReceipt(condition,"");
	}	
	/// Main ///
	public static ArrayList<ReceiptDetailGroupInfo> listReceiptDetailGroupJoinReceipt(String condition, String order) {
		
		ArrayList<ReceiptDetailGroupInfo> buff = new ArrayList<ReceiptDetailGroupInfo>();
                ReceiptDetailGroupInfo rdgi;
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT * , sum(rd.quantity) as sumquantity"
					+ " FROM receipt_detail rd"
                                        + "  INNER JOIN product p"
                                        + "  ON rd.product = p.id"
                                        + " INNER JOIN receipt r"
                                        + " ON rd.receipt = r.id"
					+ condition
                                        + " GROUP BY rd.product, rd.current_price"
					+ order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
                                rdgi = new ReceiptDetailGroupInfo();
                                rdgi.receiptDetail = new ReceiptDetail(rs.getInt("id"), conn);
                                rdgi.sumQuantity = rs.getInt("sumquantity");
				buff.add(rdgi);
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////
        
        ////////////////////[ List Top 10 Best Selling ]////////////////////
	// List top 10 best selling product as Product objects. //
	////////////////////////////////////////////////////////////////////
        public static class TopBestSellingInfo {
            public Product product;
            public Integer sumQuantity;
        }
        public static ArrayList<TopBestSellingInfo> listTopBestSelling(Integer limit) {
		
		ArrayList<TopBestSellingInfo> buff = new ArrayList<TopBestSellingInfo>();
                TopBestSellingInfo tbsi;
                
		if(limit < 1) limit = 1;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT rd.product, sum(quantity) sumquantity"
					+ " FROM receipt_detail rd"
                                        + " GROUP BY rd.product"
                                        + " ORDER BY sumquantity DESC"
                                        + " LIMIT " + limit;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
                                tbsi = new TopBestSellingInfo();
                                tbsi.product = new Product(rs.getInt("product"), conn);
                                tbsi.sumQuantity = rs.getInt("sumquantity");
				buff.add(tbsi);
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////

///////////////////////////////////[ END USER CUSTOM FUNCTIONS ]///////////////////////////////////



}

/*********************************************{{{ CLASS END }}}*********************************************/
