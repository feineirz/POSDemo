////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//----------------------------------- THIS CLASS GENERATED BY ------------------------------------//
//----------------------------------- MySQL2JavaCLS Generator ------------------------------------//
//------------------------------------------------------------------------------------------------//
//------------------------------------- < version 1.1.0.6 > --------------------------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////
//************************************************************************************************//
//****************************** Created by feinz(feineirz@live.com) *****************************//
//************************************************************************************************//
////////////////////////////////////////////////////////////////////////////////////////////////////


package DBCLS;

import java.lang.*;
import java.sql.*;
import java.util.*;


/*--------------------------------------{{{ CLASS START }}}---------------------------------------*/

/**
 * ReceiptDetail class to manage ReceiptDetail in a Database.
 */
public class ReceiptDetail {

/*================================================================================================*/
/*================================================================================================*/
/*========================================[ CLASS HEADER ]========================================*/
/*================================================================================================*/
/*================================================================================================*/

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private Integer receipt;
	private Integer product;
	private Double currentCost;
	private Double currentPrice;
	private Integer quantity;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "receipt_detail";
	public final String columnNames = ""
		+ " id,"
		+ " receipt,"
		+ " product,"
		+ " current_cost,"
		+ " current_price,"
		+ " quantity";

	/// CLASS STRUCTURE ///
	/**
	 * <pre>
	 * ReceiptDetail structure class to collect or prepare ReceiptDetail information.
	 *
	 * Usage:
	 *  ReceiptDetailInfo receiptdetailInfo = new ReceiptDetailInfo();
	 * </pre>
	 */
	public static class ReceiptDetailInfo {
		public Integer id;
		public Integer receipt;
		public Integer product;
		public Double currentCost;
		public Double currentPrice;
		public Integer quantity;
	}

/*======================================[ END CLASS HEADER ]======================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ CLASS CONSTRUCTOR ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ CONSTRUCTOR ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------------------- Create a ReceiptDetail object from the given id. -----------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// DEFAULT CONSTRUCTOR ///
	/**
	 * <pre>
	 * Default constructor for ReceiptDetail class to use a private helpful methods.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = new ReceiptDetail();
	 * </pre>
	 */
	public ReceiptDetail() {}

	/// OVERLOAD CONSTRUCTOR ///
	/**
	 * <pre>
	 * Class constructor for ReceiptDetail class by giving a Primary key.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = new ReceiptDetail(id);
	 * </pre>
	 *
	 * @param id A Primary key of ReceiptDetail to be instances.
	 */       
	public ReceiptDetail(Integer id) {		
		this(id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	/**
	 * <pre>
	 * Class constructor for ReceiptDetail class by giving a Primary key and a MySQL connector.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = new ReceiptDetail(id, conn);
	 * </pre>
	 *
	 * @param id A Primary key of ReceiptDetail to be instances.
	 * @param conn MySQL Connection use to connect to the database.
	 */
	public ReceiptDetail(Integer id, Connection conn) {
		this(id, conn, false);
	}
	
	/// MAIN CONSTRUCTOR ///
	/**
	 * <pre>
	 * Class constructor for ReceiptDetail class by giving a Primary key, MySQL connector
	 *  and Auto close connection option.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = new ReceiptDetail(id, conn, true);
	 * </pre>
	 * 
	 * @param id A Primary key of ReceiptDetail to be instances.
	 * @param conn MySQL Connection to be connect to the database.
	 * @param autoCloseConnection Auto close the given connection after query successful.
	 */
	public ReceiptDetail(Integer id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM " + relName
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.receipt = rs.getInt("receipt");
				this.product = rs.getInt("product");
				this.currentCost = rs.getDouble("current_cost");
				this.currentPrice = rs.getDouble("current_price");
				this.quantity = rs.getInt("quantity");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	}

/*===================================[ END CLASS CONSTRUCTOR ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*======================================[ CLASS PROPERTIES ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


	/// GET ///

	/**
	 * <pre>
	 * Get ReceiptDetail.id from a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  Integer id = receiptdetail.getId();
	 * </pre>
	 * 
	 * @return ReceiptDetail id.
	 */
	public Integer getId() { 
		return this.id;
	}


	/**
	 * <pre>
	 * Get ReceiptDetail.receipt from a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  Integer receipt = receiptdetail.getReceipt();
	 * </pre>
	 * 
	 * @return ReceiptDetail receipt.
	 */
	public Integer getReceipt() { 
		return this.receipt;
	}


	/**
	 * <pre>
	 * Get ReceiptDetail.product from a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  Integer product = receiptdetail.getProduct();
	 * </pre>
	 * 
	 * @return ReceiptDetail product.
	 */
	public Integer getProduct() { 
		return this.product;
	}


	/**
	 * <pre>
	 * Get ReceiptDetail.currentCost from a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  Double currentCost = receiptdetail.getCurrentCost();
	 * </pre>
	 * 
	 * @return ReceiptDetail currentCost.
	 */
	public Double getCurrentCost() { 
		return this.currentCost;
	}


	/**
	 * <pre>
	 * Get ReceiptDetail.currentPrice from a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  Double currentPrice = receiptdetail.getCurrentPrice();
	 * </pre>
	 * 
	 * @return ReceiptDetail currentPrice.
	 */
	public Double getCurrentPrice() { 
		return this.currentPrice;
	}


	/**
	 * <pre>
	 * Get ReceiptDetail.quantity from a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  Integer quantity = receiptdetail.getQuantity();
	 * </pre>
	 * 
	 * @return ReceiptDetail quantity.
	 */
	public Integer getQuantity() { 
		return this.quantity;
	}


	/// SET ///

	/**
	 * <pre>
	 * Update ReceiptDetail.receipt in a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  boolean result = receiptdetail.setReceipt(value);
	 * </pre>
	 * 
	 * @param value ReceiptDetail receipt to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setReceipt(Integer value) {
		if (updateReceiptDetailProperty("receipt", value)) {
			this.receipt = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update ReceiptDetail.product in a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  boolean result = receiptdetail.setProduct(value);
	 * </pre>
	 * 
	 * @param value ReceiptDetail product to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setProduct(Integer value) {
		if (updateReceiptDetailProperty("product", value)) {
			this.product = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update ReceiptDetail.currentCost in a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  boolean result = receiptdetail.setCurrentCost(value);
	 * </pre>
	 * 
	 * @param value ReceiptDetail currentCost to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setCurrentCost(Double value) {
		if (updateReceiptDetailProperty("current_cost", value)) {
			this.currentCost = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update ReceiptDetail.currentPrice in a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  boolean result = receiptdetail.setCurrentPrice(value);
	 * </pre>
	 * 
	 * @param value ReceiptDetail currentPrice to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setCurrentPrice(Double value) {
		if (updateReceiptDetailProperty("current_price", value)) {
			this.currentPrice = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update ReceiptDetail.quantity in a database.
	 * 
	 * Usage:
	 *  ReceiptDetail receiptdetail = New ReceiptDetail(id);
	 *  boolean result = receiptdetail.setQuantity(value);
	 * </pre>
	 * 
	 * @param value ReceiptDetail quantity to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setQuantity(Integer value) {
		if (updateReceiptDetailProperty("quantity", value)) {
			this.quantity = value;
			return true;
		} else { 
			return false;
		}
	}


/*====================================[ END CLASS PROPERTIES ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ REQUIRED FUNCTIONS ]=====================================*/
/*================================================================================================*/
/*================================================================================================*/

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------------[ LIST ]--------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------ List ReceiptDetail in a database as ReceiptDetail objects. ------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Overload ///
	/**
	 * <pre>
	 * Default List method to list all records of ReceiptDetail in a database.
	 *
	 * Usage:
	 *  ArrayList&lt;ReceiptDetail&gt; receiptdetailList = listReceiptDetail();
	 * </pre>
	 * 
	 * @return ArrayList of ReceiptDetail objects.
	 * 
	 */
	public static ArrayList<ReceiptDetail> listReceiptDetail(){
		return listReceiptDetail("","");
	}

	/**
	 * <pre>
	 * List record(s) of ReceiptDetail in a database match the given condition.
	 *
	 * Usage:
	 *  ArrayList&lt;ReceiptDetail&gt; receiptdetailList = listReceiptDetail(condition);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @return ArrayList of ReceiptDetail objects match the given condition.
	 * 
	 */
	public static ArrayList<ReceiptDetail> listReceiptDetail(String condition){
		return listReceiptDetail(condition,"");
	}
	
	/// Main ///
	/**
	 * <pre>
	 * List record(s) of ReceiptDetail in a database match the given condition
	 *  and sorted by the given order.
	 *
	 * Usage:
	 *  ArrayList&lt;ReceiptDetail&gt; receiptdetailList = listReceiptDetail(condition, order);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @param order The order to sort the returned list.<pre>
	 *  Ex. "name desc"</pre>
	 * 
	 * @return ArrayList of ReceiptDetail objects match the given condition.
	 * 
	 */
	public static ArrayList<ReceiptDetail> listReceiptDetail(String condition, String order) {
		
		ArrayList<ReceiptDetail> buff = new ArrayList<ReceiptDetail>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM receipt_detail"
				+ condition
				+ order;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new ReceiptDetail(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------------[ ADD (RAW) ]------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------ Add ReceiptDetail to database by giving a raw information. ------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Add ReceiptDetail to database by giving a raw information.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = addReceiptDetail(...);
	 * </pre>
	 * 
	 * @return ReceiptDetail object of new created ReceiptDetail.
	 */
	public static ReceiptDetail addReceiptDetail(
		Integer id, 
		Integer receipt, 
		Integer product, 
		Double current_cost, 
		Double current_price, 
		Integer quantity) {
		
		ReceiptDetailInfo receiptdetailInfo = new ReceiptDetailInfo();
		receiptdetailInfo.id = id;
		receiptdetailInfo.receipt = receipt;
		receiptdetailInfo.product = product;
		receiptdetailInfo.currentCost = current_cost;
		receiptdetailInfo.currentPrice = current_price;
		receiptdetailInfo.quantity = quantity;
		
		return addReceiptDetail(receiptdetailInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ ADD (STRUCTURED) ]--------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*-------------- Add ReceiptDetail to database by giving a structured information. ---------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Add ReceiptDetail to database by giving a structured information.
	 *
	 * Usage:
	 *  ReceiptDetailInfo receiptdetailInfo = new ReceiptDetailInfo();
	 *  receiptdetailInfo.id = id;
	 *  ...
	 *
	 *  ReceiptDetail receiptdetail = addReceiptDetail(receiptdetailInfo);
	 * </pre>
	 * 
	 * @param receiptdetailInfo ReceiptDetail information structure that contains all ReceiptDetail's information.
	 *
	 * @return ReceiptDetail object of new created ReceiptDetail.
	 */
	public static ReceiptDetail addReceiptDetail(ReceiptDetailInfo receiptdetailInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "INSERT INTO receipt_detail"
				+ " (id, receipt, product, current_cost, current_price, quantity)"
				+ " VALUES(?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, receiptdetailInfo.id);
			stmt.setInt(2, receiptdetailInfo.receipt);
			stmt.setInt(3, receiptdetailInfo.product);
			stmt.setDouble(4, receiptdetailInfo.currentCost);
			stmt.setDouble(5, receiptdetailInfo.currentPrice);
			stmt.setInt(6, receiptdetailInfo.quantity);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					ReceiptDetail receiptdetail = new ReceiptDetail(rs.getInt(1), conn);			
					conn.close();
					return receiptdetail;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	}
	
	
/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ UPDATE (RAW) ]----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*--------- Update ReceiptDetail information in a database by giving a raw information. ----------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Update ReceiptDetail information in a database by giving a raw information.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailInfo(...);
	 * </pre>
	 * 
	 * @return True if update successful.
	 */
	public static boolean updateReceiptDetailInfo(
		Integer id, 
		Integer receipt, 
		Integer product, 
		Double current_cost, 
		Double current_price, 
		Integer quantity) {
		
		ReceiptDetailInfo receiptdetailInfo = new ReceiptDetailInfo();
		receiptdetailInfo.id = id;
		receiptdetailInfo.receipt = receipt;
		receiptdetailInfo.product = product;
		receiptdetailInfo.currentCost = current_cost;
		receiptdetailInfo.currentPrice = current_price;
		receiptdetailInfo.quantity = quantity;
		
		return updateReceiptDetailInfo(receiptdetailInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*------------------------------------[ UPDATE (STRUCTURED) ]-------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------ Update ReceiptDetail information in a database by giving a structured information. ------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Update ReceiptDetail information in a database by giving a structured information.
	 *
	 * Usage:
	 *  ReceiptDetailInfo receiptdetailInfo = new ReceiptDetailInfo();
	 *  receiptdetailInfo.id = id;
	 *  ...
	 *
	 *  boolean result = ReceiptDetail.updateReceiptDetailInfo(receiptdetailInfo);
	 * </pre>
	 * 
	 * @param receiptdetailInfo ReceiptDetail information structure contains all ReceiptDetail's information.
	 *
	 * @return True if update successful.
	 */
	public static boolean updateReceiptDetailInfo(ReceiptDetailInfo receiptdetailInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE receipt_detail"
				+ " SET"
				+ " receipt = ?,"
				+ " product = ?,"
				+ " current_cost = ?,"
				+ " current_price = ?,"
				+ " quantity = ?"
				+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, receiptdetailInfo.receipt);
			stmt.setInt(2, receiptdetailInfo.product);
			stmt.setDouble(3, receiptdetailInfo.currentCost);
			stmt.setDouble(4, receiptdetailInfo.currentPrice);
			stmt.setInt(5, receiptdetailInfo.quantity);
			stmt.setInt(6, receiptdetailInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ UPDATE PROPERTY ]---------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------- Update a single property in a database by the given ColumnName and Value. -----------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateReceiptDetailProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE receipt_detail"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Integer ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateReceiptDetailProperty(String columnName, byte value) {
		return updateReceiptDetailProperty(columnName, new Long(value));
	}

	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateReceiptDetailProperty(String columnName, Short value) {
		return updateReceiptDetailProperty(columnName, new Long(value));
	}

	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateReceiptDetailProperty(String columnName, int value) {
		return updateReceiptDetailProperty(columnName, new Long(value));
	}

	/// Main Integer ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateReceiptDetailProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE receipt_detail"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Decimal ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateReceiptDetailProperty(String columnName, Float value) {
		return updateReceiptDetailProperty(columnName, new Double(value));
	}

	/// Main Decimal ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = ReceiptDetail.updateReceiptDetailProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateReceiptDetailProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE receipt_detail"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------[ DELETE ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------------------------- Delete ReceiptDetail from a database. -----------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Local ///
	/**
	 * <pre>
	 * Delete ReceiptDetail from a database.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = new ReceiptDetail(id);
	 *  ...
	 *  
	 *  boolean result = receiptdetail.deleteReceiptDetail();
	 * </pre>
	 * 
	 * @return True if deletion successful.
	 */
	public boolean deleteReceiptDetail() {
		
		return deleteReceiptDetail(this.id);
		
	}

	/// Static ///
	/**
	 * <pre>
	 * Delete ReceiptDetail from a database.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = new ReceiptDetail();
	 *  ...
	 *  
	 *  boolean result = receiptdetail.deleteReceiptDetail(id);
	 * </pre>
	 * 
	 * @param id ReceiptDetail id to be delete.
	 *
	 * @return  True if deletion successful.
	 */
	public static boolean deleteReceiptDetail(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "DELETE FROM receipt_detail"
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*------------------------------------------[ IsEXIST ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------- Check if record(s) from the given condition is exists in a database. -------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Check if record(s) from the given condition is exists in a database.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = ReceiptDetail.isExist(condition);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @return The first ReceiptDetail object matches the given condition.
	 */
	public static ReceiptDetail isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = ""
				+ "SELECT *" 
				+ " FROM receipt_detail"
				+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				ReceiptDetail receiptdetail = new ReceiptDetail(rs.getInt("id"), conn);
				conn.close();
				return receiptdetail;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	}
	

/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ ToCLASSINFO ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------ Convert ReceiptDetail class to a ReceiptDetailInfo class. -------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Convert ReceiptDetail class to a ReceiptDetailInfo class.
	 *
	 * Usage:
	 *  ReceiptDetail receiptdetail = new ReceiptDetail();
	 *  ...
	 *  
	 *  ReceiptDetailInfo receiptdetailInfo = receiptdetail.toReceiptDetailInfo();
	 * </pre>
	 *
	 * @return ReceiptDetailInfo object.
	 */
	public ReceiptDetailInfo toReceiptDetailInfo() {
        
		ReceiptDetailInfo ci = new ReceiptDetailInfo();
		ci.id = this.id;
		ci.receipt = this.receipt;
		ci.product = this.product;
		ci.currentCost = this.currentCost;
		ci.currentPrice = this.currentPrice;
		ci.quantity = this.quantity;

		return ci;

	}

/*===================================[ END REQUIRED FUNCTIONS ]===================================*/



/*================================================================================================*/
/*================================================================================================*/
/*===================================[ USER CUSTOM FUNCTIONS ]====================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------[ USER CUSTOM FUNCTIONS ]------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------------------- PLACE YOUR CUSTOM FUNCTIONS HERE -------------------------------*/
/*------------------------------------------------------------------------------------------------*/

        
	/// Overload ///
	public static ArrayList<ReceiptDetail> listReceiptDetailJoinReceipt(){
		return listReceiptDetailJoinReceipt("","");
	}
	public static ArrayList<ReceiptDetail> listReceiptDetailJoinReceipt(String condition){
		return listReceiptDetailJoinReceipt(condition,"");
	}	
	/// Main ///
	public static ArrayList<ReceiptDetail> listReceiptDetailJoinReceipt(String condition, String order) {
		
		ArrayList<ReceiptDetail> buff = new ArrayList<ReceiptDetail>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
                +"SELECT rd.*, r.receipt_date"
                + " FROM receipt_detail rd"
                + "  INNER JOIN receipt r"
                + "  ON rd.receipt = r.id"
                + condition
                + order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
                buff.add(new ReceiptDetail(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}
        
    public static class ReceiptDetailGroupInfo {

        public ReceiptDetail receiptDetail;
        public Integer sumQuantity;

    }
        
    
	/// Overload ///
	public static ArrayList<ReceiptDetailGroupInfo> listReceiptDetailGroupJoinReceipt(){
		return listReceiptDetailGroupJoinReceipt("","");
	}
	public static ArrayList<ReceiptDetailGroupInfo> listReceiptDetailGroupJoinReceipt(String condition){
		return listReceiptDetailGroupJoinReceipt(condition,"");
	}	
	/// Main ///
	public static ArrayList<ReceiptDetailGroupInfo> listReceiptDetailGroupJoinReceipt(String condition, String order) {
		
		ArrayList<ReceiptDetailGroupInfo> buff = new ArrayList<ReceiptDetailGroupInfo>();
                ReceiptDetailGroupInfo rdgi;
		
		if(!"".equals(condition)) condition = " WHERE " + condition;
		if(!"".equals(order)) order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
                + "SELECT * , sum(rd.quantity) as sumquantity"
                + " FROM receipt_detail rd"
                + "  INNER JOIN product p"
                + "  ON rd.product = p.id"
                + " INNER JOIN receipt r"
                + " ON rd.receipt = r.id"
                + condition
                + " GROUP BY rd.product, rd.current_price"
                + order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
                rdgi = new ReceiptDetailGroupInfo();
                rdgi.receiptDetail = new ReceiptDetail(rs.getInt("id"), conn);
                rdgi.sumQuantity = rs.getInt("sumquantity");
				buff.add(rdgi);
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}
        

    public static class TopBestSellingInfo {
        public Product product;
        public Integer sumQuantity;
    }
    
    public static ArrayList<TopBestSellingInfo> listTopBestSelling(Integer limit) {
		
		ArrayList<TopBestSellingInfo> buff = new ArrayList<TopBestSellingInfo>();
                TopBestSellingInfo tbsi;
                
		if(limit < 1) limit = 1;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
                + "SELECT rd.product, sum(quantity) sumquantity"
                + " FROM receipt_detail rd"
                + " GROUP BY rd.product"
                + " ORDER BY sumquantity DESC"
                + " LIMIT " + limit;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
                tbsi = new TopBestSellingInfo();
                tbsi.product = new Product(rs.getInt("product"), conn);
                tbsi.sumQuantity = rs.getInt("sumquantity");
				buff.add(tbsi);
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}

/*=================================[ END USER CUSTOM FUNCTIONS ]==================================*/



}


/*--------------------------------------{{{ CLASS END }}}---------------------------------------*/

////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//------------------------|| Feel free to use but please keep the credit. ||----------------------//
//------------------------------------------------------------------------------------------------//
//------------------------|| 01100110 01100101 01101001 01101110 01111010 ||----------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////