////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//----------------------------------- THIS CLASS GENERATED BY ------------------------------------//
//----------------------------------- MySQL2JavaCLS Generator ------------------------------------//
//------------------------------------------------------------------------------------------------//
//------------------------------------- < version 1.1.0.3 > --------------------------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////
//************************************************************************************************//
//****************************** Created by feinz(feineirz@live.com) *****************************//
//************************************************************************************************//
////////////////////////////////////////////////////////////////////////////////////////////////////


package DBCLS;

import java.sql.*;
import java.util.*;
import java.util.Date;
import java.lang.*;


/*--------------------------------------{{{ CLASS START }}}---------------------------------------*/

/**
 * Product class to manage Product in a Database.
 */
public class Product {

/*================================================================================================*/
/*================================================================================================*/
/*========================================[ CLASS HEADER ]========================================*/
/*================================================================================================*/
/*================================================================================================*/

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private Integer category;
	private String code;
	private String name;
	private String description;
	private Double cost;
	private Double price;
	private String image;
	private String status;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "product";
	public final String columnNames = ""
		+ " id,"
		+ " category,"
		+ " code,"
		+ " name,"
		+ " description,"
		+ " cost,"
		+ " price,"
		+ " image,"
		+ " status";

	/// CLASS STRUCTURE ///
	public static class ProductInfo {
		public Integer id;
		public Integer category;
		public String code;
		public String name;
		public String description;
		public Double cost;
		public Double price;
		public String image;
		public String status;
	}

/*======================================[ END CLASS HEADER ]======================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ CLASS CONSTRUCTOR ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ CONSTRUCTOR ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*-------------------------- Create a Product object from the given id. --------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// DEFAULT CONSTRUCTOR ///
	/**
	 * Default Product class to use a private helpful methods.
	 */
	public Product() {}

	/// OVERLOAD CONSTRUCTOR ///
	/**
	 * 
	 * @param Product_id A Primary key of Product to be instances.
	 */       
	public Product(Integer Product_id) {		
		this(Product_id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	/**
	 * 
	 * @param Product_id A Primary key of Product to be instances.
	 *
	 * @param conn MySQL Connection to be connected to the database.
	 */
	public Product(Integer Product_id, Connection conn) {
		this(Product_id, conn, false);
	}
	
	/// MAIN CONSTRUCTOR ///
	/**
	 * 
	 * @param Product_id A Primary key of Product to be instances.
	 *
	 * @param conn MySQL Connection to be connected to the database.
	 *
	 * @param autoCloseConnection Auto close the given connection after query successful.
	 */
	public Product(Integer Product_id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM " + relName
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, Product_id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.category = rs.getInt("category");
				this.code = rs.getString("code");
				this.name = rs.getString("name");
				this.description = rs.getString("description");
				this.cost = rs.getDouble("cost");
				this.price = rs.getDouble("price");
				this.image = rs.getString("image");
				this.status = rs.getString("status");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	}

/*===================================[ END CLASS CONSTRUCTOR ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*======================================[ CLASS PROPERTIES ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


	/// GET ///
	public Integer getId() { 
		return this.id;
	}

	public Integer getCategory() { 
		return this.category;
	}

	public String getCode() { 
		return this.code;
	}

	public String getName() { 
		return this.name;
	}

	public String getDescription() { 
		return this.description;
	}

	public Double getCost() { 
		return this.cost;
	}

	public Double getPrice() { 
		return this.price;
	}

	public String getImage() { 
		return this.image;
	}

	public String getStatus() { 
		return this.status;
	}


	/// SET ///
	public boolean setCategory(Integer value) {
		if (updateProductProperty("category", value)) {
			this.category = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCode(String value) {
		if (updateProductProperty("code", value)) {
			this.code = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setName(String value) {
		if (updateProductProperty("name", value)) {
			this.name = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setDescription(String value) {
		if (updateProductProperty("description", value)) {
			this.description = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCost(Double value) {
		if (updateProductProperty("cost", value)) {
			this.cost = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setPrice(Double value) {
		if (updateProductProperty("price", value)) {
			this.price = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setImage(String value) {
		if (updateProductProperty("image", value)) {
			this.image = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setStatus(String value) {
		if (updateProductProperty("status", value)) {
			this.status = value;
			return true;
		} else { 
			return false;
		}
	}


/*====================================[ END CLASS PROPERTIES ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ REQUIRED FUNCTIONS ]=====================================*/
/*================================================================================================*/
/*================================================================================================*/

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------------[ LIST ]--------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------------- List Product in database as Product objects. -------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Overload ///
	/**
	 * 
	 * Default List method to list all record of Product in the database.
	 * 
	 * @return ArrayList of Product objects.
	 * 
	 */
	public static ArrayList<Product> listProduct(){
		return listProduct("","");
	}

	/**
	 * 
	 * @param condition The condition to specify the record to be return.
	 * 
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"
	 * 
	 * @return ArrayList of Product objects matches to the given condition.
	 * 
	 */
	public static ArrayList<Product> listProduct(String condition){
		return listProduct(condition,"");
	}
	
	/// Main ///
	/**
	 * 
	 * @param condition The condition to specify the record to be return.
	 * 
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"
	 * 
	 * @param order The order to sort the returned list.
	 * 
	 *  Ex. "name desc"
	 * 
	 * @return ArrayList of Product objects matches to the given condition.
	 * 
	 */
	public static ArrayList<Product> listProduct(String condition, String order) {
		
		ArrayList<Product> buff = new ArrayList<Product>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM product"
				+ condition
				+ order;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new Product(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------------[ ADD (RAW) ]------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*--------------------- Add Product to database by giving a raw information. ---------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @return Product object of new created Product.
	 */
	public static Product addProduct(
		Integer id, 
		Integer category, 
		String code, 
		String name, 
		String description, 
		Double cost, 
		Double price, 
		String image, 
		String status) {
		
		ProductInfo productInfo = new ProductInfo();
		productInfo.id = id;
		productInfo.category = category;
		productInfo.code = code;
		productInfo.name = name;
		productInfo.description = description;
		productInfo.cost = cost;
		productInfo.price = price;
		productInfo.image = image;
		productInfo.status = status;
		
		return addProduct(productInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ ADD (STRUCTURED) ]--------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------------- Add Product to database by giving a structured information. ------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param productInfo Product information structure that contains all Product's information.
	 *
	 * @return Product object of new created Product.
	 */
	public static Product addProduct(ProductInfo productInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "INSERT INTO product"
				+ " (id, category, code, name, description, cost, price, image, status)"
				+ " VALUES(?,?,?,?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, productInfo.id);
			stmt.setInt(2, productInfo.category);
			stmt.setString(3, productInfo.code);
			stmt.setString(4, productInfo.name);
			stmt.setString(5, productInfo.description);
			stmt.setDouble(6, productInfo.cost);
			stmt.setDouble(7, productInfo.price);
			stmt.setString(8, productInfo.image);
			stmt.setString(9, productInfo.status);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					Product product = new Product(rs.getInt(1), conn);			
					conn.close();
					return product;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	}
	
	
/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ UPDATE (RAW) ]----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------- Update Product information in database by giving a raw information. --------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @return True if update successful.
	 */
	public static boolean updateProductInfo(
		Integer id, 
		Integer category, 
		String code, 
		String name, 
		String description, 
		Double cost, 
		Double price, 
		String image, 
		String status) {
		
		ProductInfo productInfo = new ProductInfo();
		productInfo.id = id;
		productInfo.category = category;
		productInfo.code = code;
		productInfo.name = name;
		productInfo.description = description;
		productInfo.cost = cost;
		productInfo.price = price;
		productInfo.image = image;
		productInfo.status = status;
		
		return updateProductInfo(productInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*------------------------------------[ UPDATE (STRUCTURED) ]-------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------- Update Product information in database by giving a structured information. ----------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param productInfo Product information structure contains all Product's information.
	 *
	 * @return True if update successful.
	 */
	public static boolean updateProductInfo(ProductInfo productInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE product"
				+ " SET"
				+ " category = ?,"
				+ " code = ?,"
				+ " name = ?,"
				+ " description = ?,"
				+ " cost = ?,"
				+ " price = ?,"
				+ " image = ?,"
				+ " status = ?"
				+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, productInfo.category);
			stmt.setString(2, productInfo.code);
			stmt.setString(3, productInfo.name);
			stmt.setString(4, productInfo.description);
			stmt.setDouble(5, productInfo.cost);
			stmt.setDouble(6, productInfo.price);
			stmt.setString(7, productInfo.image);
			stmt.setString(8, productInfo.status);
			stmt.setInt(9, productInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ UPDATE PROPERTY ]---------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------- Update a single property in database by the given ColumnName and Value. ------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateProductProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE product"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Integer ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateProductProperty(String columnName, byte value) {
		return updateProductProperty(columnName, new Long(value));
	}
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateProductProperty(String columnName, Short value) {
		return updateProductProperty(columnName, new Long(value));
	}
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateProductProperty(String columnName, int value) {
		return updateProductProperty(columnName, new Long(value));
	}

	/// Main Integer ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateProductProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE product"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Decimal ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateProductProperty(String columnName, Float value) {
		return updateProductProperty(columnName, new Double(value));
	}

	/// Main Decimal ///
	/**
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateProductProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE product"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------[ DELETE ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*-------------------------------- Delete Product from database. ---------------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Local ///
	/**
	 * 
	 * @return True if deletion successful.
	 */
	public boolean deleteProduct() {
		
		return deleteProduct(this.id);
		
	}

	/// Static ///
	/**
	 * 
	 * @param id Product id to be delete.
	 *
	 * @return  True if deletion successful.
	 */
	public static boolean deleteProduct(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "DELETE FROM product"
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*------------------------------------------[ IsEXIST ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------- Check if record(s) from the given condition is exists in a database. -------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @param condition The condition to specify the record to be return.
	 * 
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"
	 * 
	 * @return The first Product object matches the given condition.
	 */
	public static Product isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = ""
				+ "SELECT *" 
				+ " FROM product"
				+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Product product = new Product(rs.getInt("id"), conn);
				conn.close();
				return product;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	}
	

/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ ToCLASSINFO ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------------------- Convert Product class to the ProductInfo class. ------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * 
	 * @return ProductInfo object.
	 */
	public ProductInfo toProductInfo() {
        
		ProductInfo ci = new ProductInfo();
		ci.id = this.id;
		ci.category = this.category;
		ci.code = this.code;
		ci.name = this.name;
		ci.description = this.description;
		ci.cost = this.cost;
		ci.price = this.price;
		ci.image = this.image;
		ci.status = this.status;

		return ci;

	}

/*===================================[ END REQUIRED FUNCTIONS ]===================================*/



/*================================================================================================*/
/*================================================================================================*/
/*===================================[ USER CUSTOM FUNCTIONS ]====================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------[ USER CUSTOM FUNCTIONS ]------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------------------- PLACE YOUR CUSTOM FUNCTIONS HERE -------------------------------*/
/*------------------------------------------------------------------------------------------------*/







/*=================================[ END USER CUSTOM FUNCTIONS ]==================================*/



}


/*--------------------------------------{{{ CLASS END }}}---------------------------------------*/

////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//------------------------|| Feel free to use but please keep the credit. ||----------------------//
//------------------------------------------------------------------------------------------------//
//------------------------|| 01100110 01100101 01101001 01101110 01111010 ||----------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////
