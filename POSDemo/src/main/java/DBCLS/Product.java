/////////////////////////////////////////////////////////////////////
////////////////////// THIS CLASS GENERATED BY //////////////////////
////////////////////// MySQL2JavaCLS Generator //////////////////////
/////////////////////////////////////////////////////////////////////
/*************** Created by feinz(feineirz@live.com) ***************/
/////////////////////////////////////////////////////////////////////

package DBCLS;

import java.lang.*;
import java.sql.*;
import java.util.*;

/*********************************************{{{ CLASS START }}}*********************************************/

public class Product {

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////[ CLASS HEADER ]//////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private Integer category;
	private String code;
	private String name;
	private String description;
	private Double cost;
	private Double price;
	private String image;
	private String status;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "product";
	public final String columnNames = ""
		+ " id,"
		+ " category,"
		+ " code,"
		+ " name,"
		+ " description,"
		+ " cost,"
		+ " price,"
		+ " image,"
		+ " status";

	/// CLASS STRUCTURE ///
	public static class ProductInfo {
		public Integer id;
		public Integer category;
		public String code;
		public String name;
		public String description;
		public Double cost;
		public Double price;
		public String image;
		public String status;
	}

////////////////////////////////////////[ END CLASS HEADER ]////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ CLASS CONSTRUCTOR ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	
	//////////////////////////////[ CONSTRUCTOR ]//////////////////////////////
	// Create a Product object from the given id. //
	///////////////////////////////////////////////////////////////////////////

	/// DEFAULT CONSTRUCTOR ///
	public Product() {}

	/// OVERLOAD CONSTRUCTOR ///
	public Product(Integer Product_id) {		
		this(Product_id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	public Product(Integer Product_id, Connection conn) {
		this(Product_id, conn, false);
	} /////////////////////////////////////////////////////////////////////////
	
	/// MAIN CONSTRUCTOR ///
	public Product(Integer Product_id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = "SELECT *"
					+ " FROM " + relName
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, Product_id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.category = rs.getInt("category");
				this.code = rs.getString("code");
				this.name = rs.getString("name");
				this.description = rs.getString("description");
				this.cost = rs.getDouble("cost");
				this.price = rs.getDouble("price");
				this.image = rs.getString("image");
				this.status = rs.getString("status");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	} /////////////////////////////////////////////////////////////////////////

/////////////////////////////////////[ END CLASS CONSTRUCTOR ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////[ CLASS PROPERTIES ]////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	/// GET ///
	public Integer getId() { 
		return this.id;
	}

	public Integer getCategory() { 
		return this.category;
	}

	public String getCode() { 
		return this.code;
	}

	public String getName() { 
		return this.name;
	}

	public String getDescription() { 
		return this.description;
	}

	public Double getCost() { 
		return this.cost;
	}

	public Double getPrice() { 
		return this.price;
	}

	public String getImage() { 
		return this.image;
	}

	public String getStatus() { 
		return this.status;
	}


	/// SET ///
	public boolean setCategory(Integer value) {
		if (updateProductProperty("category", value)) {
			this.category = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCode(String value) {
		if (updateProductProperty("code", value)) {
			this.code = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setName(String value) {
		if (updateProductProperty("name", value)) {
			this.name = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setDescription(String value) {
		if (updateProductProperty("description", value)) {
			this.description = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCost(Double value) {
		if (updateProductProperty("cost", value)) {
			this.cost = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setPrice(Double value) {
		if (updateProductProperty("price", value)) {
			this.price = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setImage(String value) {
		if (updateProductProperty("image", value)) {
			this.image = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setStatus(String value) {
		if (updateProductProperty("status", value)) {
			this.status = value;
			return true;
		} else { 
			return false;
		}
	}


//////////////////////////////////////[ END CLASS PROPERTIES ]//////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ REQUIRED FUNCTIONS ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////[ List ]//////////////////////////////
	// List Product in database as Product objects. //
	////////////////////////////////////////////////////////////////////
	/// Overload ///
	public static ArrayList<Product> listProduct(){
		return listProduct("","category, name");
	}
	public static ArrayList<Product> listProduct(String condition){
		return listProduct(condition,"category, name");
	}	
	/// Main ///
	public static ArrayList<Product> listProduct(String condition, String order) {
		
		ArrayList<Product> buff = new ArrayList<Product>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT *"
					+ " FROM product"
					+ condition
					+ order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new Product(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Add ]//////////////////////////////
	// Add Product to database by giving a raw information. //
	///////////////////////////////////////////////////////////////////
	public static Product addProduct(Integer id, Integer category, String code, String name, String description, Double cost, Double price, String image, String status) {
		
		ProductInfo productInfo = new ProductInfo();
		productInfo.id = id;
		productInfo.category = category;
		productInfo.code = code;
		productInfo.name = name;
		productInfo.description = description;
		productInfo.cost = cost;
		productInfo.price = price;
		productInfo.image = image;
		productInfo.status = status;
		
		return addProduct(productInfo);
		
	}
	
	/////////////////////////////////////////////////////////////////////
	// Add Product to database by giving a structured information. //
	/////////////////////////////////////////////////////////////////////
	public static Product addProduct(ProductInfo productInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "INSERT INTO product"
					+ " (id, category, code, name, description, cost, price, image, status)"
					+ " VALUES(?,?,?,?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, productInfo.id);
			stmt.setInt(2, productInfo.category);
			stmt.setString(3, productInfo.code);
			stmt.setString(4, productInfo.name);
			stmt.setString(5, productInfo.description);
			stmt.setDouble(6, productInfo.cost);
			stmt.setDouble(7, productInfo.price);
			stmt.setString(8, productInfo.image);
			stmt.setString(9, productInfo.status);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					Product product = new Product(rs.getInt(1), conn);			
					conn.close();
					return product;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	} /////////////////////////////////////////////////////////////////
	
	
	//////////////////////////////////[ Update ]/////////////////////////////////
	// Update Product information in database by giving a raw information. //
	/////////////////////////////////////////////////////////////////////////////
	public static boolean updateProductInfo(Integer id, Integer category, String code, String name, String description, Double cost, Double price, String image, String status) {
		
		ProductInfo productInfo = new ProductInfo();
		productInfo.id = id;
		productInfo.category = category;
		productInfo.code = code;
		productInfo.name = name;
		productInfo.description = description;
		productInfo.cost = cost;
		productInfo.price = price;
		productInfo.image = image;
		productInfo.status = status;
		
		return updateProductInfo(productInfo);
		
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	// Update Product information in database by giving a structured information. //
	////////////////////////////////////////////////////////////////////////////////////
	public static boolean updateProductInfo(ProductInfo productInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE product"
					+ " SET"
					+ "  category = ?,"
					+ "  code = ?,"
					+ "  name = ?,"
					+ "  description = ?,"
					+ "  cost = ?,"
					+ "  price = ?,"
					+ "  image = ?,"
					+ "  status = ?"
					+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, productInfo.category);
			stmt.setString(2, productInfo.code);
			stmt.setString(3, productInfo.name);
			stmt.setString(4, productInfo.description);
			stmt.setDouble(5, productInfo.cost);
			stmt.setDouble(6, productInfo.price);
			stmt.setString(7, productInfo.image);
			stmt.setString(8, productInfo.status);
			stmt.setInt(9, productInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Update Property ]//////////////////////////////
	// Update a single property in database by the given ColumnName and Value. ////
	///////////////////////////////////////////////////////////////////////////////
	public boolean updateProductProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE product"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} /////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateProductProperty(String columnName, byte value) {
		return updateProductProperty(columnName, new Long(value));
	}
	public boolean updateProductProperty(String columnName, Short value) {
		return updateProductProperty(columnName, new Long(value));
	}
	public boolean updateProductProperty(String columnName, int value) {
		return updateProductProperty(columnName, new Long(value));
	}
	/// Main ///
	public boolean updateProductProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE product"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateProductProperty(String columnName, Float value) {
		return updateProductProperty(columnName, new Double(value));
	}
	/// Main ///
	public boolean updateProductProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE product"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Delete ]//////////////////////////////
	// Delete Product from database. //
	//////////////////////////////////////////////////////////////////////
	public static boolean deleteProduct(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "DELETE FROM product"
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ IsExist ]//////////////////////////////
	// Check if record(s) from the given condition is exist in a database. //
	///////////////////////////////////////////////////////////////////////
	public static Product isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = "SELECT *" 
					+ " FROM product"
					+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Product product = new Product(rs.getInt("id"), conn);
				conn.close();
				return product;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	} /////////////////////////////////////////////////////////////////////
	

/////////////////////////////////////[ END REQUIRED FUNCTIONS ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////[ USER CUSTOM FUNCTIONS ]/////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


// @USER CUSTOM FUNCTIONS@ //
// PLACE YOUR CUSTOM FUNCTIONS HERE //

///////////////////////////////////[ END USER CUSTOM FUNCTIONS ]///////////////////////////////////



}

/*********************************************{{{ CLASS END }}}*********************************************/
