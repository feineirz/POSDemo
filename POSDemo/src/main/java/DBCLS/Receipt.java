/////////////////////////////////////////////////////////////////////
////////////////////// THIS CLASS GENERATED BY //////////////////////
////////////////////// MySQL2JavaCLS Generator //////////////////////
/////////////////////////////////////////////////////////////////////
/*************** Created by feinz(feineirz@live.com) ***************/
/////////////////////////////////////////////////////////////////////

package DBCLS;

import java.sql.*;
import java.util.*;
import java.lang.*;
import java.text.DecimalFormat;

/*********************************************{{{ CLASS START }}}*********************************************/

public class Receipt {

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////[ CLASS HEADER ]//////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private String receipt_date;
	private Double cost;
	private Double total;
	private Double cash;
	private Double exchange;
	private String cashier;
	private String remark;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "receipt";
	public final String columnNames = ""
		+ " id,"
		+ " receipt_date,"
		+ " cost,"
		+ " total,"
		+ " cash,"
		+ " exchange,"
		+ " cashier,"
		+ " remark";

	/// CLASS STRUCTURE ///
	public static class ReceiptInfo {
		public Integer id;
		public String receipt_date;
		public Double cost;
		public Double total;
		public Double cash;
		public Double exchange;
		public String cashier;
		public String remark;
	}

////////////////////////////////////////[ END CLASS HEADER ]////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ CLASS CONSTRUCTOR ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	
	//////////////////////////////[ CONSTRUCTOR ]//////////////////////////////
	// Create a Receipt object from the given id. //
	///////////////////////////////////////////////////////////////////////////

	/// DEFAULT CONSTRUCTOR ///
	public Receipt() {}

	/// OVERLOAD CONSTRUCTOR ///
	public Receipt(Integer Receipt_id) {		
		this(Receipt_id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	public Receipt(Integer Receipt_id, Connection conn) {
		this(Receipt_id, conn, false);
	} /////////////////////////////////////////////////////////////////////////
	
	/// MAIN CONSTRUCTOR ///
	public Receipt(Integer Receipt_id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = "SELECT *"
					+ " FROM " + relName
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, Receipt_id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.receipt_date = rs.getString("receipt_date");
				this.cost = rs.getDouble("cost");
				this.total = rs.getDouble("total");
				this.cash = rs.getDouble("cash");
				this.exchange = rs.getDouble("exchange");
				this.cashier = rs.getString("cashier");
				this.remark = rs.getString("remark");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	} /////////////////////////////////////////////////////////////////////////

/////////////////////////////////////[ END CLASS CONSTRUCTOR ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////[ CLASS PROPERTIES ]////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	/// GET ///
	public Integer getId() { 
		return this.id;
	}

	public String getReceipt_date() { 
		return this.receipt_date;
	}

	public Double getCost() { 
		return this.cost;
	}

	public Double getTotal() { 
		return this.total;
	}

	public Double getCash() { 
		return this.cash;
	}

	public Double getExchange() { 
		return this.exchange;
	}

	public String getCashier() { 
		return this.cashier;
	}

	public String getRemark() { 
		return this.remark;
	}


	/// SET ///
	public boolean setReceipt_date(String value) {
		if (updateReceiptProperty("receipt_date", value)) {
			this.receipt_date = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCost(Double value) {
		if (updateReceiptProperty("cost", value)) {
			this.cost = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setTotal(Double value) {
		if (updateReceiptProperty("total", value)) {
			this.total = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCash(Double value) {
		if (updateReceiptProperty("cash", value)) {
			this.cash = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setExchange(Double value) {
		if (updateReceiptProperty("exchange", value)) {
			this.exchange = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCashier(String value) {
		if (updateReceiptProperty("cashier", value)) {
			this.cashier = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setRemark(String value) {
		if (updateReceiptProperty("remark", value)) {
			this.remark = value;
			return true;
		} else { 
			return false;
		}
	}


//////////////////////////////////////[ END CLASS PROPERTIES ]//////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ REQUIRED FUNCTIONS ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////[ List ]//////////////////////////////
	// List Receipt in database as Receipt objects. //
	////////////////////////////////////////////////////////////////////
	/// Overload ///
	public static ArrayList<Receipt> listReceipt(){
		return listReceipt("","");
	}
	public static ArrayList<Receipt> listReceipt(String condition){
		return listReceipt(condition,"");
	}	
	/// Main ///
	public static ArrayList<Receipt> listReceipt(String condition, String order) {
		
		ArrayList<Receipt> buff = new ArrayList<Receipt>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT *"
					+ " FROM receipt"
					+ condition
					+ order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new Receipt(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Add ]//////////////////////////////
	// Add Receipt to database by giving a raw information. //
	///////////////////////////////////////////////////////////////////
	public static Receipt addReceipt(Integer id, String receipt_date, Double cost, Double total, Double cash, Double exchange, String cashier, String remark) {
		
		ReceiptInfo receiptInfo = new ReceiptInfo();
		receiptInfo.id = id;
		receiptInfo.receipt_date = receipt_date;
		receiptInfo.cost = cost;
		receiptInfo.total = total;
		receiptInfo.cash = cash;
		receiptInfo.exchange = exchange;
		receiptInfo.cashier = cashier;
		receiptInfo.remark = remark;
		
		return addReceipt(receiptInfo);
		
	}
	
	/////////////////////////////////////////////////////////////////////
	// Add Receipt to database by giving a structured information. //
	/////////////////////////////////////////////////////////////////////
	public static Receipt addReceipt(ReceiptInfo receiptInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "INSERT INTO receipt"
					+ " (id, receipt_date, cost, total, cash, exchange, cashier, remark)"
					+ " VALUES(?,?,?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, receiptInfo.id);
			stmt.setString(2, receiptInfo.receipt_date);
			stmt.setDouble(3, receiptInfo.cost);
			stmt.setDouble(4, receiptInfo.total);
			stmt.setDouble(5, receiptInfo.cash);
			stmt.setDouble(6, receiptInfo.exchange);
			stmt.setString(7, receiptInfo.cashier);
			stmt.setString(8, receiptInfo.remark);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					Receipt receipt = new Receipt(rs.getInt(1), conn);			
					conn.close();
					return receipt;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	} /////////////////////////////////////////////////////////////////
	
	
	//////////////////////////////////[ Update ]/////////////////////////////////
	// Update Receipt information in database by giving a raw information. //
	/////////////////////////////////////////////////////////////////////////////
	public static boolean updateReceiptInfo(Integer id, String receipt_date, Double cost, Double total, Double cash, Double exchange, String cashier, String remark) {
		
		ReceiptInfo receiptInfo = new ReceiptInfo();
		receiptInfo.id = id;
		receiptInfo.receipt_date = receipt_date;
		receiptInfo.cost = cost;
		receiptInfo.total = total;
		receiptInfo.cash = cash;
		receiptInfo.exchange = exchange;
		receiptInfo.cashier = cashier;
		receiptInfo.remark = remark;
		
		return updateReceiptInfo(receiptInfo);
		
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	// Update Receipt information in database by giving a structured information. //
	////////////////////////////////////////////////////////////////////////////////////
	public static boolean updateReceiptInfo(ReceiptInfo receiptInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt"
					+ " SET"
					+ "  receipt_date = ?,"
					+ "  cost = ?,"
					+ "  total = ?,"
					+ "  cash = ?,"
					+ "  exchange = ?,"
					+ "  cashier = ?,"
					+ "  remark = ?"
					+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, receiptInfo.receipt_date);
			stmt.setDouble(2, receiptInfo.cost);
			stmt.setDouble(3, receiptInfo.total);
			stmt.setDouble(4, receiptInfo.cash);
			stmt.setDouble(5, receiptInfo.exchange);
			stmt.setString(6, receiptInfo.cashier);
			stmt.setString(7, receiptInfo.remark);
			stmt.setInt(8, receiptInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Update Property ]//////////////////////////////
	// Update a single property in database by the given ColumnName and Value. ////
	///////////////////////////////////////////////////////////////////////////////
	public boolean updateReceiptProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} /////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateReceiptProperty(String columnName, byte value) {
		return updateReceiptProperty(columnName, new Long(value));
	}
	public boolean updateReceiptProperty(String columnName, Short value) {
		return updateReceiptProperty(columnName, new Long(value));
	}
	public boolean updateReceiptProperty(String columnName, int value) {
		return updateReceiptProperty(columnName, new Long(value));
	}
	/// Main ///
	public boolean updateReceiptProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateReceiptProperty(String columnName, Float value) {
		return updateReceiptProperty(columnName, new Double(value));
	}
	/// Main ///
	public boolean updateReceiptProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE receipt"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Delete ]//////////////////////////////
	// Delete Receipt from database. //
	//////////////////////////////////////////////////////////////////////
	public static boolean deleteReceipt(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "DELETE FROM receipt"
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ IsExist ]//////////////////////////////
	// Check if record(s) from the given condition is exist in a database. //
	///////////////////////////////////////////////////////////////////////
	public static Receipt isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = "SELECT *" 
					+ " FROM receipt"
					+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Receipt receipt = new Receipt(rs.getInt("id"), conn);
				conn.close();
				return receipt;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	} /////////////////////////////////////////////////////////////////////
	

/////////////////////////////////////[ END REQUIRED FUNCTIONS ]/////////////////////////////////////




////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////[ USER CUSTOM FUNCTIONS ]/////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


// @USER CUSTOM FUNCTIONS@ //
// PLACE YOUR CUSTOM FUNCTIONS HERE //
        
        /// GET LASTEST ID ///
	public static Integer getNextID() {
            
            Connection conn = new MySQLDBConnector().getDBConnection();
		
            try {
                String qry = "SELECT auto_increment as id"
                                + " FROM information_schema.TABLES"
                                + " WHERE TABLE_SCHEMA = 'posdemo'"
                                + " AND TABLE_NAME = 'receipt'";
                Statement stmt = conn.createStatement();

                ResultSet rs = stmt.executeQuery(qry);
                while(rs.next()) {
                    return rs.getInt("id");
                }
                return 1;

            } catch (SQLException e) {
                e.printStackTrace();
            }

            return -1;
		
	} /////////////////////////////////////////////////////////////////////////
        
        ////////////////////////////[ Get SumCost ]///////////////////////////
	// Get Summary of total sales from the given condition (if prefer).   //
	///////////////////////////////////////////////////////////////////////
	public static Double getSumCost(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
                if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = "SELECT sum(cost) as sumcost" 
					+ " FROM receipt"
                                        + condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Double sumCost = rs.getDouble("sumcost");
				conn.close();
				return sumCost; 
			}			
			conn.close();
			return 0.0;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return 0.0;
		}

	} /////////////////////////////////////////////////////////////////////
        
        ////////////////////////////[ Get SumTotal ]///////////////////////////
	// Get Summary of total sales from the given condition (if prefer).   //
	///////////////////////////////////////////////////////////////////////
	public static Double getSumTotal(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
                if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = "SELECT sum(total) as sumtotal" 
					+ " FROM receipt"
                                        + condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Double sumTotal = rs.getDouble("sumtotal");
				conn.close();
				return sumTotal; 
			}			
			conn.close();
			return 0.0;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return 0.0;
		}

	} /////////////////////////////////////////////////////////////////////
        
        ////////////////////////////[ Get SumTotal ]///////////////////////////
	// Get Summary of total sales from the given condition (if prefer).   //
	///////////////////////////////////////////////////////////////////////
        
        public static class MonthlyIncomeInfo {
            public Integer date_id;
            public String receiptDate;
            public Double cost;
            public Double income;
            public Double profit;
        }
        
	public static ArrayList<MonthlyIncomeInfo> getMonthlyIncome(int year, int month) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
                
                DecimalFormat df = new DecimalFormat("00");
                String dfMonth = df.format(month);
                
                ArrayList<MonthlyIncomeInfo> buff = new ArrayList<>();
                MonthlyIncomeInfo mii;
		
		try {
			String qry = "SELECT DATE_FORMAT(receipt_date ,'%d') as date_id, DATE_FORMAT(receipt_date ,'%Y-%m-%d') as receipt_date, sum(cost) as cost, sum(total) as income, (sum(total)-sum(cost)) as profit" 
					+ " FROM receipt"
                                        + " WHERE receipt_date LIKE '"+year+"-"+dfMonth+"-%'"
                                        + " GROUP BY YEAR(receipt_date), MONTH(receipt_date), DAY(receipt_date)";
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
                                mii = new MonthlyIncomeInfo();
                                mii.date_id = rs.getInt("date_id");
                                mii.receiptDate = rs.getString("receipt_date");
				mii.cost = rs.getDouble("cost");
                                mii.income = rs.getDouble("income");
                                mii.profit = rs.getDouble("profit");
                                buff.add(mii);
			}			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
                
                return buff;

	} /////////////////////////////////////////////////////////////////////

///////////////////////////////////[ END USER CUSTOM FUNCTIONS ]///////////////////////////////////



}

/*********************************************{{{ CLASS END }}}*********************************************/
