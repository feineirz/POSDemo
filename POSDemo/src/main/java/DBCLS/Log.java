/////////////////////////////////////////////////////////////////////
////////////////////// THIS CLASS GENERATED BY //////////////////////
////////////////////// MySQL2JavaCLS Generator //////////////////////
/////////////////////////////////////////////////////////////////////
/*************** Created by feinz(feineirz@live.com) ***************/
/////////////////////////////////////////////////////////////////////

package DBCLS;

import java.sql.*;
import java.util.*;
import java.lang.*;

/*********************************************{{{ CLASS START }}}*********************************************/

public class Log {

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////[ CLASS HEADER ]//////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private String log_date;
	private String user;
	private String category;
	private String event;
	private String details;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "log";
	public final String columnNames = ""
		+ " id,"
		+ " log_date,"
		+ " user,"
		+ " category,"
		+ " event,"
		+ " detail";

	/// CLASS STRUCTURE ///
	public static class LogInfo {
		public Integer id;
		public String log_date;
		public String user;
		public String category;
		public String event;
		public String details;
	}

////////////////////////////////////////[ END CLASS HEADER ]////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ CLASS CONSTRUCTOR ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	
	//////////////////////////////[ CONSTRUCTOR ]//////////////////////////////
	// Create a Log object from the given id. //
	///////////////////////////////////////////////////////////////////////////

	/// DEFAULT CONSTRUCTOR ///
	public Log() {}

	/// OVERLOAD CONSTRUCTOR ///
	public Log(Integer Log_id) {		
		this(Log_id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	public Log(Integer Log_id, Connection conn) {
		this(Log_id, conn, false);
	} /////////////////////////////////////////////////////////////////////////
	
	/// MAIN CONSTRUCTOR ///
	public Log(Integer Log_id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = "SELECT *"
					+ " FROM " + relName
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, Log_id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.log_date = rs.getString("log_date");
				this.user = rs.getString("user");
				this.category = rs.getString("category");
				this.event = rs.getString("event");
				this.details = rs.getString("details");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	} /////////////////////////////////////////////////////////////////////////

/////////////////////////////////////[ END CLASS CONSTRUCTOR ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////[ CLASS PROPERTIES ]////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	/// GET ///
	public Integer getId() { 
		return this.id;
	}

	public String getLog_date() { 
		return this.log_date;
	}

	public String getUser() { 
		return this.user;
	}

	public String getCategory() { 
		return this.category;
	}

	public String getEvent() { 
		return this.event;
	}

	public String getDetails() { 
		return this.details;
	}


	/// SET ///
	public boolean setLog_date(String value) {
		if (updateLogProperty("log_date", value)) {
			this.log_date = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setUser(String value) {
		if (updateLogProperty("user", value)) {
			this.user = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setCategory(String value) {
		if (updateLogProperty("category", value)) {
			this.category = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setEvent(String value) {
		if (updateLogProperty("event", value)) {
			this.event = value;
			return true;
		} else { 
			return false;
		}
	}

	public boolean setDetails(String value) {
		if (updateLogProperty("details", value)) {
			this.details = value;
			return true;
		} else { 
			return false;
		}
	}


//////////////////////////////////////[ END CLASS PROPERTIES ]//////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////[ REQUIRED FUNCTIONS ]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////[ List ]//////////////////////////////
	// List Log in database as Log objects. //
	////////////////////////////////////////////////////////////////////
	/// Overload ///
	public static ArrayList<Log> listLog(){
		return listLog("","");
	}
	public static ArrayList<Log> listLog(String condition){
		return listLog(condition,"");
	}	
	/// Main ///
	public static ArrayList<Log> listLog(String condition, String order) {
		
		ArrayList<Log> buff = new ArrayList<Log>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "SELECT *"
					+ " FROM log"
					+ condition
					+ order;
			Statement stmt = conn.createStatement();			
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new Log(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	} //////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Add ]//////////////////////////////
	// Add Log to database by giving a raw information. //
	///////////////////////////////////////////////////////////////////
	public static Log addLog(Integer id, String log_date, String user, String category, String event, String details) {
		
		LogInfo logInfo = new LogInfo();
		logInfo.id = id;
		logInfo.log_date = log_date;
		logInfo.user = user;
		logInfo.category = category;
		logInfo.event = event;
		logInfo.details = details;
		
		return addLog(logInfo);
		
	}
	
	/////////////////////////////////////////////////////////////////////
	// Add Log to database by giving a structured information. //
	/////////////////////////////////////////////////////////////////////
	public static Log addLog(LogInfo logInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "INSERT INTO log"
					+ " (id, log_date, user, category, event, details)"
					+ " VALUES(?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, logInfo.id);
			stmt.setString(2, logInfo.log_date);
			stmt.setString(3, logInfo.user);
			stmt.setString(4, logInfo.category);
			stmt.setString(5, logInfo.event);
			stmt.setString(6, logInfo.details);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					Log log = new Log(rs.getInt(1), conn);			
					conn.close();
					return log;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	} /////////////////////////////////////////////////////////////////
	
	
	//////////////////////////////////[ Update ]/////////////////////////////////
	// Update Log information in database by giving a raw information. //
	/////////////////////////////////////////////////////////////////////////////
	public static boolean updateLogInfo(Integer id, String log_date, String user, String category, String event, String details) {
		
		LogInfo logInfo = new LogInfo();
		logInfo.id = id;
		logInfo.log_date = log_date;
		logInfo.user = user;
		logInfo.category = category;
		logInfo.event = event;
		logInfo.details = details;
		
		return updateLogInfo(logInfo);
		
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	// Update Log information in database by giving a structured information. //
	////////////////////////////////////////////////////////////////////////////////////
	public static boolean updateLogInfo(LogInfo logInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE log"
					+ " SET"
					+ "  log_date = ?,"
					+ "  user = ?,"
					+ "  category = ?,"
					+ "  event = ?,"
					+ "  details = ?"
					+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, logInfo.log_date);
			stmt.setString(2, logInfo.user);
			stmt.setString(3, logInfo.category);
			stmt.setString(4, logInfo.event);
			stmt.setString(5, logInfo.details);
			stmt.setInt(6, logInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Update Property ]//////////////////////////////
	// Update a single property in database by the given ColumnName and Value. ////
	///////////////////////////////////////////////////////////////////////////////
	public boolean updateLogProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE log"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} /////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateLogProperty(String columnName, byte value) {
		return updateLogProperty(columnName, new Long(value));
	}
	public boolean updateLogProperty(String columnName, Short value) {
		return updateLogProperty(columnName, new Long(value));
	}
	public boolean updateLogProperty(String columnName, int value) {
		return updateLogProperty(columnName, new Long(value));
	}
	/// Main ///
	public boolean updateLogProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE log"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	
	
	/// Overload ///
	public boolean updateLogProperty(String columnName, Float value) {
		return updateLogProperty(columnName, new Double(value));
	}
	/// Main ///
	public boolean updateLogProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "UPDATE log"
					+ " SET " + columnName + " = ?"
					+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ Delete ]//////////////////////////////
	// Delete Log from database. //
	//////////////////////////////////////////////////////////////////////
	public static boolean deleteLog(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = "DELETE FROM log"
					+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	} ////////////////////////////////////////////////////////////////////
	

	//////////////////////////////[ IsExist ]//////////////////////////////
	// Check if record(s) from the given condition is exist in a database. //
	///////////////////////////////////////////////////////////////////////
	public static Log isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = "SELECT *" 
					+ " FROM log"
					+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Log log = new Log(rs.getInt("id"), conn);
				conn.close();
				return log;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	} /////////////////////////////////////////////////////////////////////
	

/////////////////////////////////////[ END REQUIRED FUNCTIONS ]/////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////[ USER CUSTOM FUNCTIONS ]/////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


// @USER CUSTOM FUNCTIONS@ //
// PLACE YOUR CUSTOM FUNCTIONS HERE //

///////////////////////////////////[ END USER CUSTOM FUNCTIONS ]///////////////////////////////////



}

/*********************************************{{{ CLASS END }}}*********************************************/
