////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//----------------------------------- THIS CLASS GENERATED BY ------------------------------------//
//----------------------------------- MySQL2JavaCLS Generator ------------------------------------//
//------------------------------------------------------------------------------------------------//
//------------------------------------- < version 1.1.0.6 > --------------------------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////
//************************************************************************************************//
//****************************** Created by feinz(feineirz@live.com) *****************************//
//************************************************************************************************//
////////////////////////////////////////////////////////////////////////////////////////////////////


package DBCLS;

import java.sql.*;
import java.util.*;
import java.util.Date;
import java.lang.*;


/*--------------------------------------{{{ CLASS START }}}---------------------------------------*/

/**
 * Log class to manage Log in a Database.
 */
public class Log {

/*================================================================================================*/
/*================================================================================================*/
/*========================================[ CLASS HEADER ]========================================*/
/*================================================================================================*/
/*================================================================================================*/

	
	/// PRIVATE PROPERTIES ///
	private Integer id;
	private String logDate;
	private String user;
	private String category;
	private String event;
	private String details;
	
	/// PUBLIC PROPERTIES ///
	public final String relName = "log";
	public final String columnNames = ""
		+ " id,"
		+ " log_date,"
		+ " user,"
		+ " category,"
		+ " event,"
		+ " details";

	/// CLASS STRUCTURE ///
	/**
	 * <pre>
	 * Log structure class to collect or prepare Log information.
	 *
	 * Usage:
	 *  LogInfo logInfo = new LogInfo();
	 * </pre>
	 */
	public static class LogInfo {
		public Integer id;
		public String logDate;
		public String user;
		public String category;
		public String event;
		public String details;
	}

/*======================================[ END CLASS HEADER ]======================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ CLASS CONSTRUCTOR ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ CONSTRUCTOR ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------------------------- Create a Log object from the given id. ----------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// DEFAULT CONSTRUCTOR ///
	/**
	 * <pre>
	 * Default constructor for Log class to use a private helpful methods.
	 *
	 * Usage:
	 *  Log log = new Log();
	 * </pre>
	 */
	public Log() {}

	/// OVERLOAD CONSTRUCTOR ///
	/**
	 * <pre>
	 * Class constructor for Log class by giving a Primary key.
	 *
	 * Usage:
	 *  Log log = new Log(id);
	 * </pre>
	 *
	 * @param id A Primary key of Log to be instances.
	 */       
	public Log(Integer id) {		
		this(id, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	/**
	 * <pre>
	 * Class constructor for Log class by giving a Primary key and a MySQL connector.
	 *
	 * Usage:
	 *  Log log = new Log(id, conn);
	 * </pre>
	 *
	 * @param id A Primary key of Log to be instances.
	 * @param conn MySQL Connection use to connect to the database.
	 */
	public Log(Integer id, Connection conn) {
		this(id, conn, false);
	}
	
	/// MAIN CONSTRUCTOR ///
	/**
	 * <pre>
	 * Class constructor for Log class by giving a Primary key, MySQL connector
	 *  and Auto close connection option.
	 *
	 * Usage:
	 *  Log log = new Log(id, conn, true);
	 * </pre>
	 * 
	 * @param id A Primary key of Log to be instances.
	 * @param conn MySQL Connection to be connect to the database.
	 * @param autoCloseConnection Auto close the given connection after query successful.
	 */
	public Log(Integer id, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM " + relName
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				this.id = rs.getInt("id");
				this.logDate = rs.getString("log_date");
				this.user = rs.getString("user");
				this.category = rs.getString("category");
				this.event = rs.getString("event");
				this.details = rs.getString("details");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	}

/*===================================[ END CLASS CONSTRUCTOR ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*======================================[ CLASS PROPERTIES ]======================================*/
/*================================================================================================*/
/*================================================================================================*/


	/// GET ///

	/**
	 * <pre>
	 * Get Log.id from a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  Integer id = log.getId();
	 * </pre>
	 * 
	 * @return Log id.
	 */
	public Integer getId() { 
		return this.id;
	}


	/**
	 * <pre>
	 * Get Log.logDate from a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  String logDate = log.getLogDate();
	 * </pre>
	 * 
	 * @return Log logDate.
	 */
	public String getLogDate() { 
		return this.logDate;
	}


	/**
	 * <pre>
	 * Get Log.user from a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  String user = log.getUser();
	 * </pre>
	 * 
	 * @return Log user.
	 */
	public String getUser() { 
		return this.user;
	}


	/**
	 * <pre>
	 * Get Log.category from a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  String category = log.getCategory();
	 * </pre>
	 * 
	 * @return Log category.
	 */
	public String getCategory() { 
		return this.category;
	}


	/**
	 * <pre>
	 * Get Log.event from a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  String event = log.getEvent();
	 * </pre>
	 * 
	 * @return Log event.
	 */
	public String getEvent() { 
		return this.event;
	}


	/**
	 * <pre>
	 * Get Log.details from a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  String details = log.getDetails();
	 * </pre>
	 * 
	 * @return Log details.
	 */
	public String getDetails() { 
		return this.details;
	}


	/// SET ///

	/**
	 * <pre>
	 * Update Log.logDate in a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  boolean result = log.setLogDate(value);
	 * </pre>
	 * 
	 * @param value Log logDate to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setLogDate(String value) {
		if (updateLogProperty("log_date", value)) {
			this.logDate = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update Log.user in a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  boolean result = log.setUser(value);
	 * </pre>
	 * 
	 * @param value Log user to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setUser(String value) {
		if (updateLogProperty("user", value)) {
			this.user = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update Log.category in a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  boolean result = log.setCategory(value);
	 * </pre>
	 * 
	 * @param value Log category to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setCategory(String value) {
		if (updateLogProperty("category", value)) {
			this.category = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update Log.event in a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  boolean result = log.setEvent(value);
	 * </pre>
	 * 
	 * @param value Log event to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setEvent(String value) {
		if (updateLogProperty("event", value)) {
			this.event = value;
			return true;
		} else { 
			return false;
		}
	}


	/**
	 * <pre>
	 * Update Log.details in a database.
	 * 
	 * Usage:
	 *  Log log = New Log(id);
	 *  boolean result = log.setDetails(value);
	 * </pre>
	 * 
	 * @param value Log details to update to the database.
	 * 
	 * @return True if update successful.
	 */
	public boolean setDetails(String value) {
		if (updateLogProperty("details", value)) {
			this.details = value;
			return true;
		} else { 
			return false;
		}
	}


/*====================================[ END CLASS PROPERTIES ]====================================*/



/*================================================================================================*/
/*================================================================================================*/
/*=====================================[ REQUIRED FUNCTIONS ]=====================================*/
/*================================================================================================*/
/*================================================================================================*/

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------------[ LIST ]--------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------------------------- List Log in a database as Log objects. ----------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Overload ///
	/**
	 * <pre>
	 * Default List method to list all records of Log in a database.
	 *
	 * Usage:
	 *  ArrayList&lt;Log&gt; logList = listLog();
	 * </pre>
	 * 
	 * @return ArrayList of Log objects.
	 * 
	 */
	public static ArrayList<Log> listLog(){
		return listLog("","");
	}

	/**
	 * <pre>
	 * List record(s) of Log in a database match the given condition.
	 *
	 * Usage:
	 *  ArrayList&lt;Log&gt; logList = listLog(condition);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @return ArrayList of Log objects match the given condition.
	 * 
	 */
	public static ArrayList<Log> listLog(String condition){
		return listLog(condition,"");
	}
	
	/// Main ///
	/**
	 * <pre>
	 * List record(s) of Log in a database match the given condition
	 *  and sorted by the given order.
	 *
	 * Usage:
	 *  ArrayList&lt;Log&gt; logList = listLog(condition, order);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @param order The order to sort the returned list.<pre>
	 *  Ex. "name desc"</pre>
	 * 
	 * @return ArrayList of Log objects match the given condition.
	 * 
	 */
	public static ArrayList<Log> listLog(String condition, String order) {
		
		ArrayList<Log> buff = new ArrayList<Log>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM log"
				+ condition
				+ order;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new Log(rs.getInt("id"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------------[ ADD (RAW) ]------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------------------- Add Log to database by giving a raw information. -----------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Add Log to database by giving a raw information.
	 *
	 * Usage:
	 *  Log log = addLog(...);
	 * </pre>
	 * 
	 * @return Log object of new created Log.
	 */
	public static Log addLog(
		Integer id, 
		String log_date, 
		String user, 
		String category, 
		String event, 
		String details) {
		
		LogInfo logInfo = new LogInfo();
		logInfo.id = id;
		logInfo.logDate = log_date;
		logInfo.user = user;
		logInfo.category = category;
		logInfo.event = event;
		logInfo.details = details;
		
		return addLog(logInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ ADD (STRUCTURED) ]--------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------- Add Log to database by giving a structured information. --------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Add Log to database by giving a structured information.
	 *
	 * Usage:
	 *  LogInfo logInfo = new LogInfo();
	 *  logInfo.id = id;
	 *  ...
	 *
	 *  Log log = addLog(logInfo);
	 * </pre>
	 * 
	 * @param logInfo Log information structure that contains all Log's information.
	 *
	 * @return Log object of new created Log.
	 */
	public static Log addLog(LogInfo logInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "INSERT INTO log"
				+ " (id, log_date, user, category, event, details)"
				+ " VALUES(?,?,?,?,?,?)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
			stmt.setInt(1, logInfo.id);
			stmt.setString(2, logInfo.logDate);
			stmt.setString(3, logInfo.user);
			stmt.setString(4, logInfo.category);
			stmt.setString(5, logInfo.event);
			stmt.setString(6, logInfo.details);
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					Log log = new Log(rs.getInt(1), conn);			
					conn.close();
					return log;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	}
	
	
/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ UPDATE (RAW) ]----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*-------------- Update Log information in a database by giving a raw information. ---------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Update Log information in a database by giving a raw information.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogInfo(...);
	 * </pre>
	 * 
	 * @return True if update successful.
	 */
	public static boolean updateLogInfo(
		Integer id, 
		String log_date, 
		String user, 
		String category, 
		String event, 
		String details) {
		
		LogInfo logInfo = new LogInfo();
		logInfo.id = id;
		logInfo.logDate = log_date;
		logInfo.user = user;
		logInfo.category = category;
		logInfo.event = event;
		logInfo.details = details;
		
		return updateLogInfo(logInfo);
		
	}
	
/*------------------------------------------------------------------------------------------------*/
/*------------------------------------[ UPDATE (STRUCTURED) ]-------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*----------- Update Log information in a database by giving a structured information. -----------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Update Log information in a database by giving a structured information.
	 *
	 * Usage:
	 *  LogInfo logInfo = new LogInfo();
	 *  logInfo.id = id;
	 *  ...
	 *
	 *  boolean result = Log.updateLogInfo(logInfo);
	 * </pre>
	 * 
	 * @param logInfo Log information structure contains all Log's information.
	 *
	 * @return True if update successful.
	 */
	public static boolean updateLogInfo(LogInfo logInfo) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE log"
				+ " SET"
				+ " log_date = ?,"
				+ " user = ?,"
				+ " category = ?,"
				+ " event = ?,"
				+ " details = ?"
				+ " WHERE id = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, logInfo.logDate);
			stmt.setString(2, logInfo.user);
			stmt.setString(3, logInfo.category);
			stmt.setString(4, logInfo.event);
			stmt.setString(5, logInfo.details);
			stmt.setInt(6, logInfo.id);

			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*--------------------------------------[ UPDATE PROPERTY ]---------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------- Update a single property in a database by the given ColumnName and Value. -----------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateLogProperty(String columnName, String value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE log"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = '" + this.id + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Integer ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateLogProperty(String columnName, byte value) {
		return updateLogProperty(columnName, new Long(value));
	}

	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateLogProperty(String columnName, Short value) {
		return updateLogProperty(columnName, new Long(value));
	}

	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateLogProperty(String columnName, int value) {
		return updateLogProperty(columnName, new Long(value));
	}

	/// Main Integer ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateLogProperty(String columnName, long value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE log"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Decimal ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateLogProperty(String columnName, Float value) {
		return updateLogProperty(columnName, new Double(value));
	}

	/// Main Decimal ///
	/**
	 * <pre>
	 * Update a single property in a database by the given ColumnName and Value.
	 *
	 * Usage:
	 *  boolean result = Log.updateLogProperty(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean updateLogProperty(String columnName, Double value) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "UPDATE log"
				+ " SET " + columnName + " = ?"
				+ " WHERE id = " + this.id;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------[ DELETE ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*--------------------------------- Delete Log from a database. ----------------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/// Local ///
	/**
	 * <pre>
	 * Delete Log from a database.
	 *
	 * Usage:
	 *  Log log = new Log(id);
	 *  ...
	 *  
	 *  boolean result = log.deleteLog();
	 * </pre>
	 * 
	 * @return True if deletion successful.
	 */
	public boolean deleteLog() {
		
		return deleteLog(this.id);
		
	}

	/// Static ///
	/**
	 * <pre>
	 * Delete Log from a database.
	 *
	 * Usage:
	 *  Log log = new Log();
	 *  ...
	 *  
	 *  boolean result = log.deleteLog(id);
	 * </pre>
	 * 
	 * @param id Log id to be delete.
	 *
	 * @return  True if deletion successful.
	 */
	public static boolean deleteLog(Integer id) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "DELETE FROM log"
				+ " WHERE id=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setInt(1, id);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

/*------------------------------------------------------------------------------------------------*/
/*------------------------------------------[ IsEXIST ]-------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------- Check if record(s) from the given condition is exists in a database. -------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Check if record(s) from the given condition is exists in a database.
	 *
	 * Usage:
	 *  Log log = Log.isExist(condition);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @return The first Log object matches the given condition.
	 */
	public static Log isExist(String condition) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		
		if(condition != "") condition = " WHERE " + condition;
		try {
			String qry = ""
				+ "SELECT *" 
				+ " FROM log"
				+ condition;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while (rs.next()) {
				Log log = new Log(rs.getInt("id"), conn);
				conn.close();
				return log;
			}			
			conn.close();
			return null;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return null;
		}

	}
	

/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------[ ToCLASSINFO ]-----------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*---------------------------- Convert Log class to a LogInfo class. -----------------------------*/
/*------------------------------------------------------------------------------------------------*/

	/**
	 * <pre>
	 * Convert Log class to a LogInfo class.
	 *
	 * Usage:
	 *  Log log = new Log();
	 *  ...
	 *  
	 *  LogInfo logInfo = log.toLogInfo();
	 * </pre>
	 *
	 * @return LogInfo object.
	 */
	public LogInfo toLogInfo() {
        
		LogInfo ci = new LogInfo();
		ci.id = this.id;
		ci.logDate = this.logDate;
		ci.user = this.user;
		ci.category = this.category;
		ci.event = this.event;
		ci.details = this.details;

		return ci;

	}

/*===================================[ END REQUIRED FUNCTIONS ]===================================*/



/*================================================================================================*/
/*================================================================================================*/
/*===================================[ USER CUSTOM FUNCTIONS ]====================================*/
/*================================================================================================*/
/*================================================================================================*/


/*------------------------------------------------------------------------------------------------*/
/*-----------------------------------[ USER CUSTOM FUNCTIONS ]------------------------------------*/
/*------------------------------------------------------------------------------------------------*/
/*------------------------------- PLACE YOUR CUSTOM FUNCTIONS HERE -------------------------------*/
/*------------------------------------------------------------------------------------------------*/







/*=================================[ END USER CUSTOM FUNCTIONS ]==================================*/



}


/*---------------------------------------{{{ CLASS END }}}----------------------------------------*/

////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------//
//------------------------|| Feel free to use but please keep the credit. ||----------------------//
//------------------------------------------------------------------------------------------------//
//------------------------|| 01100110 01100101 01101001 01101110 01111010 ||----------------------//
//------------------------------------------------------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////
